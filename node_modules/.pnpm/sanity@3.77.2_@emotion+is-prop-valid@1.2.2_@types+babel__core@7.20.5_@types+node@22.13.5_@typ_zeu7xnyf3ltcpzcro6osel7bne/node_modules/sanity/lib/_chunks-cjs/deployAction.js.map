{"version":3,"file":"deployAction.js","sources":["../../src/_internal/cli/actions/deploy/deployAction.ts"],"sourcesContent":["/* eslint-disable max-statements */\nimport path from 'node:path'\nimport zlib from 'node:zlib'\n\nimport {type CliCommandArguments, type CliCommandContext} from '@sanity/cli'\nimport tar from 'tar-fs'\n\nimport {shouldAutoUpdate} from '../../util/shouldAutoUpdate'\nimport buildSanityStudio, {type BuildSanityStudioCommandFlags} from '../build/buildAction'\nimport {extractManifestSafe} from '../manifest/extractManifestAction'\nimport {\n  type BaseConfigOptions,\n  checkDir,\n  createDeployment,\n  debug,\n  dirIsEmptyOrNonExistent,\n  getInstalledSanityVersion,\n  getOrCreateCoreApplication,\n  getOrCreateStudio,\n  getOrCreateUserApplicationFromConfig,\n  type UserApplication,\n} from './helpers'\n\nexport interface DeployStudioActionFlags extends BuildSanityStudioCommandFlags {\n  build?: boolean\n}\n\nexport default async function deployStudioAction(\n  args: CliCommandArguments<DeployStudioActionFlags>,\n  context: CliCommandContext,\n): Promise<void> {\n  const {apiClient, workDir, chalk, output, prompt, cliConfig} = context\n  const flags = {build: true, ...args.extOptions}\n  const customSourceDir = args.argsWithoutOptions[0]\n  const sourceDir = path.resolve(process.cwd(), customSourceDir || path.join(workDir, 'dist'))\n  const isAutoUpdating = shouldAutoUpdate({flags, cliConfig})\n  const isCoreApp = cliConfig && '__experimental_coreAppConfiguration' in cliConfig\n\n  const installedSanityVersion = await getInstalledSanityVersion()\n  const configStudioHost = cliConfig && 'studioHost' in cliConfig && cliConfig.studioHost\n  const appId =\n    cliConfig &&\n    '__experimental_coreAppConfiguration' in cliConfig &&\n    cliConfig.__experimental_coreAppConfiguration?.appId\n\n  const client = apiClient({\n    requireUser: true,\n    requireProject: !isCoreApp, // core apps are not project-specific\n  }).withConfig({apiVersion: 'v2024-08-01'})\n\n  if (customSourceDir === 'graphql') {\n    throw new Error('Did you mean `sanity graphql deploy`?')\n  }\n\n  if (customSourceDir) {\n    let relativeOutput = path.relative(process.cwd(), sourceDir)\n    if (relativeOutput[0] !== '.') {\n      relativeOutput = `./${relativeOutput}`\n    }\n\n    const isEmpty = await dirIsEmptyOrNonExistent(sourceDir)\n    const shouldProceed =\n      isEmpty ||\n      (await prompt.single({\n        type: 'confirm',\n        message: `\"${relativeOutput}\" is not empty, do you want to proceed?`,\n        default: false,\n      }))\n\n    if (!shouldProceed) {\n      output.print('Cancelled.')\n      return\n    }\n\n    output.print(`Building to ${relativeOutput}\\n`)\n  }\n\n  // Check that the project has a studio hostname\n  let spinner = output.spinner('Checking project info').start()\n\n  let userApplication: UserApplication\n\n  try {\n    const configParams: BaseConfigOptions & {\n      appHost?: string\n      appId?: string\n    } = {\n      client,\n      context,\n      spinner,\n    }\n\n    if (isCoreApp && appId) {\n      configParams.appId = appId\n    } else if (configStudioHost) {\n      configParams.appHost = configStudioHost\n    }\n    // If the user has provided a studioHost / appId in the config, use that\n    if (configStudioHost || appId) {\n      userApplication = await getOrCreateUserApplicationFromConfig(configParams)\n    } else {\n      userApplication = isCoreApp\n        ? await getOrCreateCoreApplication({client, context, spinner})\n        : await getOrCreateStudio({client, context, spinner})\n    }\n  } catch (err) {\n    if (err.message) {\n      output.error(chalk.red(err.message))\n      return\n    }\n\n    debug('Error creating user application', err)\n    throw err\n  }\n\n  // Always build the project, unless --no-build is passed\n  const shouldBuild = flags.build\n  if (shouldBuild) {\n    const buildArgs = {\n      ...args,\n      extOptions: flags,\n      argsWithoutOptions: [customSourceDir].filter(Boolean),\n    }\n    const {didCompile} = await buildSanityStudio(buildArgs, context, {basePath: '/'})\n\n    if (!didCompile) {\n      return\n    }\n\n    if (!isCoreApp) {\n      await extractManifestSafe(\n        {\n          ...buildArgs,\n          extOptions: {},\n          extraArguments: [],\n        },\n        context,\n      )\n    }\n  }\n\n  // Ensure that the directory exists, is a directory and seems to have valid content\n  spinner = output.spinner('Verifying local content').start()\n  try {\n    await checkDir(sourceDir)\n    spinner.succeed()\n  } catch (err) {\n    spinner.fail()\n    debug('Error checking directory', err)\n    throw err\n  }\n\n  // Now create a tarball of the given directory\n  const parentDir = path.dirname(sourceDir)\n  const base = path.basename(sourceDir)\n  const tarball = tar.pack(parentDir, {entries: [base]}).pipe(zlib.createGzip())\n\n  spinner = output.spinner(`Deploying to ${isCoreApp ? 'CORE' : 'Sanity.Studio'}`).start()\n  try {\n    const {location} = await createDeployment({\n      client,\n      applicationId: userApplication.id,\n      version: installedSanityVersion,\n      isAutoUpdating,\n      tarball,\n      isCoreApp,\n    })\n\n    spinner.succeed()\n\n    // And let the user know we're done\n    output.print(\n      `\\nSuccess! ${isCoreApp ? 'Application deployed' : `Studio deployed to ${chalk.cyan(location)}`}`,\n    )\n\n    if ((isCoreApp && !appId) || (!isCoreApp && !configStudioHost)) {\n      output.print(\n        `\\nAdd ${chalk.cyan(isCoreApp ? `appId: '${userApplication.id}'` : `studioHost: '${userApplication.appHost}'`)}`,\n      )\n      output.print(\n        `to ${isCoreApp ? '__experimental_coreAppConfiguration' : 'defineCliConfig root properties'} in sanity.cli.js or sanity.cli.ts`,\n      )\n      output.print(`to avoid prompting ${isCoreApp ? '' : 'for hostname'} on next deploy.`)\n    }\n  } catch (err) {\n    spinner.fail()\n    debug('Error deploying studio', err)\n    throw err\n  }\n}\n"],"names":["deployStudioAction","args","context","apiClient","workDir","chalk","output","prompt","cliConfig","flags","build","extOptions","customSourceDir","argsWithoutOptions","sourceDir","path","resolve","process","cwd","join","isAutoUpdating","shouldAutoUpdate","isCoreApp","installedSanityVersion","getInstalledSanityVersion","configStudioHost","studioHost","appId","__experimental_coreAppConfiguration","client","requireUser","requireProject","withConfig","apiVersion","Error","relativeOutput","relative","dirIsEmptyOrNonExistent","single","type","message","default","print","spinner","start","userApplication","configParams","appHost","getOrCreateUserApplicationFromConfig","getOrCreateCoreApplication","getOrCreateStudio","err","error","red","debug","buildArgs","filter","Boolean","didCompile","buildSanityStudio","basePath","extractManifestSafe","extraArguments","checkDir","succeed","fail","parentDir","dirname","base","basename","tarball","tar","pack","entries","pipe","zlib","createGzip","location","createDeployment","applicationId","id","version","cyan"],"mappings":"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"}