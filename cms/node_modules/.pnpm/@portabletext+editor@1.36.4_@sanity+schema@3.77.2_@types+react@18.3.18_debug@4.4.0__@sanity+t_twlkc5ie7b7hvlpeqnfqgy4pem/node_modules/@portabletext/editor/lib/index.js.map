{"version":3,"file":"index.js","sources":["../src/internal-utils/selection.ts","../src/editor/components/DefaultObject.tsx","../src/editor/components/drop-indicator.tsx","../src/editor/components/use-draggable.ts","../src/editor/components/use-droppable.ts","../src/editor/components/Element.tsx","../src/editor/components/Leaf.tsx","../src/editor/plugins/createWithHotKeys.ts","../src/editor/withSyncRangeDecorations.ts","../src/editor/Editable.tsx","../src/editor-event-listener.tsx"],"sourcesContent":["import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import type {PortableTextBlock, PortableTextChild} from '@sanity/types'\n\nexport function DefaultBlockObject(props: {\n  value: PortableTextBlock | PortableTextChild\n}) {\n  return (\n    <div style={{userSelect: 'none'}}>\n      [{props.value._type}: {props.value._key}]\n    </div>\n  )\n}\n\nexport function DefaultInlineObject(props: {\n  value: PortableTextBlock | PortableTextChild\n}) {\n  return (\n    <span style={{userSelect: 'none'}}>\n      [{props.value._type}: {props.value._key}]\n    </span>\n  )\n}\n","export function DropIndicator() {\n  return (\n    <div\n      className=\"pt-drop-indicator\"\n      style={{\n        position: 'absolute',\n        width: '100%',\n        height: 1,\n        borderBottom: '1px solid currentColor',\n        zIndex: 5,\n      }}\n    />\n  )\n}\n","import {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  type DragEvent,\n  type RefObject,\n} from 'react'\nimport {Path, Transforms, type Element as SlateElement} from 'slate'\nimport {ReactEditor, useSlateStatic} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  IS_DRAGGING,\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n  IS_DRAGGING_ELEMENT_TARGET,\n} from '../../internal-utils/weakMaps'\n\nconst debug = debugWithName('useDraggable')\n\ntype Draggable = {\n  draggableProps: {\n    draggable: boolean\n    onDragStart?: (event: DragEvent) => void\n    onDrag?: (event: DragEvent) => void\n    onDragEnd?: (event: DragEvent) => void\n  }\n}\n\nexport function useDraggable(props: {\n  element: SlateElement\n  readOnly: boolean\n  blockRef: RefObject<HTMLDivElement | null>\n}): Draggable {\n  const editor = useSlateStatic()\n  const dragGhostRef = useRef<HTMLElement>(undefined)\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () =>\n      setBlockElement(\n        props.blockRef\n          ? props.blockRef.current\n          : ReactEditor.toDOMNode(editor, props.element),\n      ),\n    [editor, props.element, props.blockRef],\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragEnd = useCallback(\n    (event: DragEvent) => {\n      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor)\n      if (targetBlock) {\n        IS_DRAGGING.set(editor, false)\n        event.preventDefault()\n        event.stopPropagation()\n        IS_DRAGGING_ELEMENT_TARGET.delete(editor)\n        if (dragGhostRef.current) {\n          debug('Removing drag ghost')\n          document.body.removeChild(dragGhostRef.current)\n        }\n        const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor)\n        let targetPath = ReactEditor.findPath(editor, targetBlock)\n        const myPath = ReactEditor.findPath(editor, props.element)\n        const isBefore = Path.isBefore(myPath, targetPath)\n        if (dragPosition === 'bottom' && !isBefore) {\n          // If it is already at the bottom, don't do anything.\n          if (targetPath[0] >= editor.children.length - 1) {\n            debug('target is already at the bottom, not moving')\n            return\n          }\n          const originalPath = targetPath\n          targetPath = Path.next(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (\n          dragPosition === 'top' &&\n          isBefore &&\n          targetPath[0] !== editor.children.length - 1\n        ) {\n          const originalPath = targetPath\n          targetPath = Path.previous(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (Path.equals(targetPath, myPath)) {\n          event.preventDefault()\n          debug('targetPath and myPath is the same, not moving')\n          return\n        }\n        debug(\n          `Moving element ${props.element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(\n            targetPath,\n          )} (${dragPosition})`,\n        )\n        Transforms.moveNodes(editor, {at: myPath, to: targetPath})\n        editor.onChange()\n        return\n      }\n      debug('No target element, not doing anything')\n    },\n    [editor, props.element],\n  )\n\n  // Note: this is called for the dragging block\n  const handleDrag = useCallback(\n    (event: DragEvent) => {\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_BLOCK_ELEMENT.set(editor, props.element)\n      event.stopPropagation() // Stop propagation so that leafs don't get this and take focus/selection!\n\n      const target = event.target\n\n      if (target instanceof HTMLElement) {\n        target.style.opacity = '1'\n      }\n    },\n    [editor, props.element],\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragStart = useCallback(\n    (event: DragEvent) => {\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      if (event.dataTransfer) {\n        event.dataTransfer.setData('application/portable-text', 'something')\n        event.dataTransfer.effectAllowed = 'move'\n      }\n      // Clone blockElement so that it will not be visually clipped by scroll-containers etc.\n      // The application that uses the portable-text-editor may indicate the element used as\n      // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.\n      if (blockElement && blockElement instanceof HTMLElement) {\n        let dragGhost = blockElement.cloneNode(true) as HTMLElement\n        const customGhost = dragGhost.querySelector(\n          '[data-pt-drag-ghost-element]',\n        )\n        if (customGhost) {\n          dragGhost = customGhost as HTMLElement\n        }\n\n        // Set the `data-dragged` attribute so the consumer can style the element while itâ€™s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        if (document.body) {\n          dragGhostRef.current = dragGhost\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n          const rect = blockElement.getBoundingClientRect()\n          const x = event.clientX - rect.left\n          const y = event.clientY - rect.top\n          dragGhost.style.width = `${rect.width}px`\n          dragGhost.style.height = `${rect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      }\n      handleDrag(event)\n    },\n    [blockElement, editor, handleDrag],\n  )\n\n  if (props.readOnly) {\n    return {\n      draggableProps: {\n        draggable: false,\n        onDragStart: undefined,\n        onDrag: undefined,\n        onDragEnd: undefined,\n      },\n    }\n  }\n\n  return {\n    draggableProps: {\n      draggable: true,\n      onDragStart: handleDragStart,\n      onDrag: handleDrag,\n      onDragEnd: handleDragEnd,\n    },\n  }\n}\n","import type React from 'react'\nimport {useCallback, useEffect, useState, type DragEvent} from 'react'\nimport type {Element as SlateElement} from 'slate'\nimport {ReactEditor, useSlateStatic} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n  IS_DRAGGING_ELEMENT_TARGET,\n} from '../../internal-utils/weakMaps'\n\nconst debug = debugWithName('useDroppable')\n\ntype Droppable = {\n  droppableProps: {\n    onDragOver?: (event: DragEvent) => void\n    onDragLeave?: () => void\n    onDrop?: (event: DragEvent) => void\n  }\n  isDraggingOverTop: boolean\n  isDraggingOverBottom: boolean\n}\n\nexport function useDroppable(props: {\n  element: SlateElement\n  blockRef: React.RefObject<HTMLDivElement | null>\n  readOnly: boolean\n}): Droppable {\n  const editor = useSlateStatic()\n  const [isDragOver, setIsDragOver] = useState(false)\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () =>\n      setBlockElement(\n        props.blockRef\n          ? props.blockRef.current\n          : ReactEditor.toDOMNode(editor, props.element),\n      ),\n    [editor, props.element, props.blockRef],\n  )\n\n  const handleDragOver = useCallback(\n    (event: DragEvent) => {\n      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor)\n      // debug('Drag over', blockElement)\n      if (!isMyDragOver || !blockElement) {\n        return\n      }\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n      IS_DRAGGING_ELEMENT_TARGET.set(editor, props.element)\n      const elementRect = blockElement.getBoundingClientRect()\n      const offset = elementRect.top\n      const height = elementRect.height\n      const Y = event.pageY\n      const loc = Math.abs(offset - Y)\n      let position: 'top' | 'bottom' = 'bottom'\n      if (props.element === editor.children[0]) {\n        position = 'top'\n      } else if (loc < height / 2) {\n        position = 'top'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      } else {\n        position = 'bottom'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      }\n      if (isMyDragOver === props.element) {\n        event.dataTransfer.dropEffect = 'none'\n        return\n      }\n      setIsDragOver(true)\n    },\n    [blockElement, editor, props.element],\n  )\n\n  const handleDragLeave = useCallback(() => {\n    setIsDragOver(false)\n  }, [])\n\n  const handleDrop = useCallback(\n    (event: DragEvent) => {\n      if (IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {\n        debug('On drop (prevented)', props.element)\n        event.preventDefault()\n        event.stopPropagation()\n        setIsDragOver(false)\n      }\n    },\n    [editor, props.element],\n  )\n\n  const isDraggingOverFirstBlock =\n    isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const isDraggingOverLastBlock =\n    isDragOver &&\n    editor.children[editor.children.length - 1] ===\n      IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n\n  const isDraggingOverTop =\n    isDraggingOverFirstBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'top')\n  const isDraggingOverBottom =\n    isDraggingOverLastBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'bottom')\n\n  if (props.readOnly) {\n    return {\n      droppableProps: {\n        onDragOver: undefined,\n        onDragLeave: undefined,\n        onDrop: undefined,\n      },\n      isDraggingOverTop: false,\n      isDraggingOverBottom: false,\n    }\n  }\n\n  return {\n    droppableProps: {\n      onDragOver: handleDragOver,\n      onDragLeave: handleDragLeave,\n      onDrop: handleDrop,\n    },\n    isDraggingOverTop,\n    isDraggingOverBottom,\n  }\n}\n","import type {\n  Path,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  useMemo,\n  useRef,\n  type FunctionComponent,\n  type JSX,\n  type ReactElement,\n} from 'react'\nimport {Editor, Range, Element as SlateElement} from 'slate'\nimport {\n  ReactEditor,\n  useSelected,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../internal-utils/weakMaps'\nimport type {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {DefaultBlockObject, DefaultInlineObject} from './DefaultObject'\nimport {DropIndicator} from './drop-indicator'\nimport {useDraggable} from './use-draggable'\nimport {useDroppable} from './use-droppable'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement<any>\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused =\n    (selected && editor.selection && Range.isCollapsed(editor.selection)) ||\n    false\n  const droppable = useDroppable({element, blockRef, readOnly})\n  const draggable = useDraggable({element, blockRef, readOnly})\n\n  const value = useMemo(\n    () =>\n      fromSlateValue(\n        [element],\n        schemaTypes.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )[0],\n    [editor, element, schemaTypes.block.name],\n  )\n\n  let renderedBlock = children\n\n  let className: string | undefined\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (editor.isInline(element)) {\n    const path = ReactEditor.findPath(editor, element)\n    const [block] = Editor.node(editor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find(\n      (_type) => _type.name === element._type,\n    )\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [\n        {_key: block._key},\n        'children',\n        {_key: element._key},\n      ]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <span\n            draggable={!readOnly}\n            className=\"pt-inline-object\"\n            data-testid=\"pt-inline-object\"\n            ref={inlineBlockObjectRef}\n            key={element._key}\n            style={inlineBlockStyle}\n            contentEditable={false}\n          >\n            {renderChild &&\n              renderChild({\n                annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                children: <DefaultInlineObject value={value} />,\n                editorElementRef: inlineBlockObjectRef,\n                focused,\n                path: elmPath,\n                schemaType,\n                selected,\n                type: schemaType,\n                value: value as PortableTextChild,\n              })}\n            {!renderChild && <DefaultInlineObject value={value} />}\n          </span>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find(\n      (item) => item.value === style,\n    )\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        schemaType: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level: number | undefined\n\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n\n    if (editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find(\n        (item) => item.value === element.listItem,\n      )\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          schemaType: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      }\n    }\n\n    const renderProps: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: renderedBlock,\n        editorElementRef: blockRef,\n        focused,\n        level,\n        listItem: isListItem ? element.listItem : undefined,\n        path: blockPath,\n        selected,\n        style,\n        schemaType: schemaTypes.block,\n        value,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaTypes.block\n        },\n      },\n    )\n\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(renderProps as BlockRenderProps)\n      : children\n\n    return (\n      <div\n        key={element._key}\n        {...attributes}\n        className={className}\n        spellCheck={spellCheck}\n        {...droppable.droppableProps}\n      >\n        {droppable.isDraggingOverTop ? <DropIndicator /> : null}\n        <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        {droppable.isDraggingOverBottom ? <DropIndicator /> : null}\n      </div>\n    )\n  }\n\n  const schemaType = schemaTypes.blockObjects.find(\n    (_type) => _type.name === element._type,\n  )\n\n  if (!schemaType) {\n    throw new Error(\n      `Could not find schema type for block element of _type ${element._type}`,\n    )\n  }\n\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n\n  className = 'pt-block pt-object-block'\n\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )[0]\n\n  let renderedBlockFromProps: JSX.Element | undefined\n\n  if (renderBlock) {\n    const _props: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: <DefaultBlockObject value={value} />,\n        editorElementRef: blockRef,\n        focused,\n        path: blockPath,\n        schemaType,\n        selected,\n        value: block,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaType\n        },\n      },\n    )\n    renderedBlockFromProps = renderBlock(_props as BlockRenderProps)\n  }\n\n  return (\n    <div\n      key={element._key}\n      {...attributes}\n      className={className}\n      {...droppable.droppableProps}\n      {...draggable.draggableProps}\n    >\n      {droppable.isDraggingOverTop ? <DropIndicator /> : null}\n      {children}\n      <div ref={blockRef} contentEditable={false}>\n        {renderedBlockFromProps ? (\n          renderedBlockFromProps\n        ) : (\n          <DefaultBlockObject value={value} />\n        )}\n      </div>\n      {droppable.isDraggingOverBottom ? <DropIndicator /> : null}\n    </div>\n  )\n}\n\nElement.displayName = 'Element'\n","import type {\n  Path,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {Text} from 'slate'\nimport {useSelected, type RenderLeafProps} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n  BlockDecoratorRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('components:Leaf')\n\nconst EMPTY_MARKS: string[] = []\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  editorActor: EditorActor\n  children: ReactElement<any>\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation,\n  } = props\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n  const block = children.props.parent as PortableTextTextBlock | undefined\n  const path: Path = useMemo(\n    () => (block ? [{_key: block?._key}, 'children', {_key: leaf._key}] : []),\n    [block, leaf._key],\n  )\n  const decoratorValues = useMemo(\n    () => schemaTypes.decorators.map((dec) => dec.value),\n    [schemaTypes.decorators],\n  )\n  const marks: string[] = useMemo(\n    () =>\n      uniq(\n        (leaf.marks || EMPTY_MARKS).filter((mark) =>\n          decoratorValues.includes(mark),\n        ),\n      ),\n    [decoratorValues, leaf.marks],\n  )\n  const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS\n  const annotations = useMemo(\n    () =>\n      annotationMarks\n        .map(\n          (mark) =>\n            !decoratorValues.includes(mark) &&\n            block?.markDefs?.find((def) => def._key === mark),\n        )\n        .filter(Boolean) as PortableTextObject[],\n    [annotationMarks, block, decoratorValues],\n  )\n\n  const shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n    debug('Setting selection and focus from range')\n    const winSelection = window.getSelection()\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blur', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focus', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  const content = useMemo(() => {\n    let returnedChildren = children\n    // Render text nodes\n    if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n      marks.forEach((mark) => {\n        const schemaType = schemaTypes.decorators.find(\n          (dec) => dec.value === mark,\n        )\n        if (schemaType && renderDecorator) {\n          const _props: Omit<BlockDecoratorRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                children: returnedChildren,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                selected,\n                schemaType,\n                value: mark,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaType\n                },\n              },\n            )\n          returnedChildren = renderDecorator(\n            _props as BlockDecoratorRenderProps,\n          )\n        }\n      })\n\n      if (block && annotations.length > 0) {\n        annotations.forEach((annotation) => {\n          const schemaType = schemaTypes.annotations.find(\n            (t) => t.name === annotation._type,\n          )\n          if (schemaType) {\n            if (renderAnnotation) {\n              const _props: Omit<BlockAnnotationRenderProps, 'type'> =\n                Object.defineProperty(\n                  {\n                    block,\n                    children: returnedChildren,\n                    editorElementRef: spanRef,\n                    focused,\n                    path,\n                    selected,\n                    schemaType,\n                    value: annotation,\n                  },\n                  'type',\n                  {\n                    enumerable: false,\n                    get() {\n                      console.warn(\n                        \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                      )\n                      return schemaType\n                    },\n                  },\n                )\n\n              returnedChildren = (\n                <span ref={spanRef}>\n                  {renderAnnotation(_props as BlockAnnotationRenderProps)}\n                </span>\n              )\n            } else {\n              returnedChildren = <span ref={spanRef}>{returnedChildren}</span>\n            }\n          }\n        })\n      }\n      if (block && renderChild) {\n        const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n        if (child) {\n          const defaultRendered = <>{returnedChildren}</>\n          const _props: Omit<BlockChildRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                annotations,\n                children: defaultRendered,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                schemaType: schemaTypes.span,\n                selected,\n                value: child,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaTypes.span\n                },\n              },\n            )\n          returnedChildren = renderChild(_props as BlockChildRenderProps)\n        }\n      }\n    }\n    return returnedChildren\n  }, [\n    annotations,\n    block,\n    children,\n    focused,\n    leaf,\n    marks,\n    path,\n    renderAnnotation,\n    renderChild,\n    renderDecorator,\n    schemaTypes.annotations,\n    schemaTypes.decorators,\n    schemaTypes.span,\n    selected,\n  ])\n  return useMemo(\n    () => (\n      <span key={leaf._key} {...attributes} ref={spanRef}>\n        {content}\n      </span>\n    ),\n    [leaf, attributes, content],\n  )\n}\n\nLeaf.displayName = 'Leaf'\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isHotkey} from '../../internal-utils/is-hotkey'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions ?? {}\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import type {BaseEditor, Operation} from 'slate'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\n\n// React Compiler considers `slateEditor` as immutable, and opts-out if we do this inline in a useEffect, doing it in a function moves it out of the scope, and opts-in again for the rest of the component.\nexport function withSyncRangeDecorations({\n  editorActor,\n  slateEditor,\n  syncRangeDecorations,\n}: {\n  editorActor: EditorActor\n  slateEditor: BaseEditor & ReactEditor & PortableTextSlateEditor\n  syncRangeDecorations: (operation?: Operation) => void\n}) {\n  const originalApply = slateEditor.apply\n\n  slateEditor.apply = (op: Operation) => {\n    originalApply(op)\n\n    if (\n      !editorActor.getSnapshot().matches({'edit mode': 'read only'}) &&\n      op.type !== 'set_selection'\n    ) {\n      syncRangeDecorations(op)\n    }\n  }\n\n  return () => {\n    slateEditor.apply = originalApply\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {isEqual, noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type CSSProperties,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {\n  Editor,\n  Node,\n  Path,\n  Range as SlateRange,\n  Transforms,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n  type Text,\n} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {\n  moveRangeByOperation,\n  toPortableTextRange,\n  toSlateRange,\n} from '../internal-utils/ranges'\nimport {normalizeSelection} from '../internal-utils/selection'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../internal-utils/values'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport {Element} from './components/Element'\nimport {Leaf} from './components/Leaf'\nimport {EditorActorContext} from './editor-actor-context'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {withSyncRangeDecorations} from './withSyncRangeDecorations'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\ninterface BaseRangeWithDecoration extends BaseRange {\n  rangeDecoration: RangeDecoration\n}\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n *\n *\n * The core component that renders the editor. Must be placed within the {@link EditorProvider} component.\n *\n * @example\n * ```tsx\n * import { PortableTextEditable, EditorProvider } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  return (\n *   <EditorProvider>\n *    <PortableTextEditable />\n *  </EditorProvider>\n *  )\n * }\n * ```\n * @group Components\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onClick,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n  const [rangeDecorationState, setRangeDecorationsState] = useState<\n    BaseRangeWithDecoration[]\n  >([])\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const rangeDecorationsRef = useRef(rangeDecorations)\n\n  const editorActor = useContext(EditorActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const schemaTypes = useSelector(editorActor, (s) => s.context.schema)\n  const slateEditor = useSlate()\n\n  const blockTypeName = schemaTypes.block.name\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return slateEditor\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    debug('Editable is in edit mode')\n    return withHotKeys(slateEditor)\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      schemaTypes,\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      lProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => {\n      if (lProps.leaf._type === 'span') {\n        let rendered = (\n          <Leaf\n            {...lProps}\n            editorActor={editorActor}\n            schemaTypes={schemaTypes}\n            renderAnnotation={renderAnnotation}\n            renderChild={renderChild}\n            renderDecorator={renderDecorator}\n            readOnly={readOnly}\n          />\n        )\n        if (\n          renderPlaceholder &&\n          lProps.leaf.placeholder &&\n          lProps.text.text === ''\n        ) {\n          return (\n            <>\n              <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n                {renderPlaceholder()}\n              </span>\n              {rendered}\n            </>\n          )\n        }\n        const decoration = lProps.leaf.rangeDecoration\n        if (decoration) {\n          rendered = decoration.component({children: rendered})\n        }\n        return rendered\n      }\n      return lProps.children\n    },\n    [\n      editorActor,\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n      schemaTypes,\n    ],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'notify.selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [blockTypeName, editorActor, propsSelection, slateEditor])\n\n  const syncRangeDecorations = useCallback(\n    (operation?: Operation) => {\n      if (rangeDecorations && rangeDecorations.length > 0) {\n        const newSlateRanges: BaseRangeWithDecoration[] = []\n        rangeDecorations.forEach((rangeDecorationItem) => {\n          const slateRange = toSlateRange(\n            rangeDecorationItem.selection,\n            slateEditor,\n          )\n          if (!SlateRange.isRange(slateRange)) {\n            if (rangeDecorationItem.onMoved) {\n              rangeDecorationItem.onMoved({\n                newSelection: null,\n                rangeDecoration: rangeDecorationItem,\n                origin: 'local',\n              })\n            }\n            return\n          }\n          let newRange: BaseRange | null | undefined\n          if (operation) {\n            newRange = moveRangeByOperation(slateRange, operation)\n            if (\n              (newRange && newRange !== slateRange) ||\n              (newRange === null && slateRange)\n            ) {\n              const value = PortableTextEditor.getValue(portableTextEditor)\n              const newRangeSelection = toPortableTextRange(\n                value,\n                newRange,\n                schemaTypes,\n              )\n              if (rangeDecorationItem.onMoved) {\n                rangeDecorationItem.onMoved({\n                  newSelection: newRangeSelection,\n                  rangeDecoration: rangeDecorationItem,\n                  origin: 'local',\n                })\n              }\n            }\n          }\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            newSlateRanges.push({\n              ...(newRange || slateRange),\n              rangeDecoration: rangeDecorationItem,\n            })\n          }\n        })\n        if (newSlateRanges.length > 0) {\n          setRangeDecorationsState(newSlateRanges)\n          return\n        }\n      }\n      setRangeDecorationsState((rangeDecorationState) => {\n        // If there's state then we want to reset\n        if (rangeDecorationState.length > 0) {\n          return []\n        }\n        // Otherwise we no-op, React will skip a state update if what we return has reference equality to the previous state\n        return rangeDecorationState\n      })\n    },\n    [portableTextEditor, rangeDecorations, schemaTypes, slateEditor],\n  )\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      syncRangeDecorations()\n      restoreSelectionFromProps()\n    })\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [editorActor, restoreSelectionFromProps, syncRangeDecorations])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  const [syncedRangeDecorations, setSyncedRangeDecorations] = useState(false)\n  useEffect(() => {\n    if (!syncedRangeDecorations) {\n      // We only want this to run once, on mount\n      setSyncedRangeDecorations(true)\n      syncRangeDecorations()\n    }\n  }, [syncRangeDecorations, syncedRangeDecorations])\n\n  useEffect(() => {\n    if (!isEqual(rangeDecorations, rangeDecorationsRef.current)) {\n      syncRangeDecorations()\n    }\n    rangeDecorationsRef.current = rangeDecorations\n  }, [rangeDecorations, syncRangeDecorations])\n\n  // Sync range decorations after an operation is applied\n  useEffect(() => {\n    const teardown = withSyncRangeDecorations({\n      editorActor,\n      slateEditor,\n      syncRangeDecorations,\n    })\n    return () => teardown()\n  }, [editorActor, slateEditor, syncRangeDecorations])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'copy',\n            data: event.nativeEvent.clipboardData,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = PortableTextEditor.getValue(portableTextEditor)\n      const ptRange = toPortableTextRange(\n        value,\n        slateEditor.selection,\n        schemaTypes,\n      )\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({event, value, path, schemaTypes})\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        editorActor.send({type: 'notify.loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              slateEditor.insertData(event.clipboardData)\n            } else if (result.insert) {\n              slateEditor.insertFragment(\n                toSlateValue(result.insert as PortableTextBlock[], {\n                  schemaTypes,\n                }),\n              )\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.error(error)\n\n            return error\n          })\n          .finally(() => {\n            editorActor.send({type: 'notify.done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'paste',\n            data: event.nativeEvent.clipboardData,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, schemaTypes, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'notify.focused', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          editorActor.send({\n            type: 'notify.selection',\n            selection,\n          })\n        }\n      }\n    },\n    [editorActor, onFocus, portableTextEditor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      const focusBlockPath = slateEditor.selection\n        ? slateEditor.selection.focus.path.slice(0, 1)\n        : undefined\n      const focusBlock = focusBlockPath\n        ? (Node.descendant(slateEditor, focusBlockPath) as\n            | SlateTextBlock\n            | VoidElement)\n        : undefined\n      const [_, lastNodePath] = Node.last(slateEditor, [])\n      const lastBlockPath = lastNodePath.slice(0, 1)\n      const lastNodeFocused = focusBlockPath\n        ? Path.equals(lastBlockPath, focusBlockPath)\n        : false\n      const lastBlockIsVoid = focusBlock\n        ? !slateEditor.isTextBlock(focusBlock)\n        : false\n      const collapsedSelection =\n        slateEditor.selection && SlateRange.isCollapsed(slateEditor.selection)\n\n      if (collapsedSelection && lastNodeFocused && lastBlockIsVoid) {\n        Transforms.insertNodes(\n          slateEditor,\n          slateEditor.pteCreateTextBlock({decorators: []}),\n        )\n        slateEditor.onChange()\n      }\n    },\n    [onClick, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        editorActor.send({type: 'notify.blurred', event})\n      }\n    },\n    [editorActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'key.down',\n            keyboardEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'key.up',\n            keyboardEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate: (entry: NodeEntry) => BaseRange[] = useCallback(\n    ([, path]) => {\n      if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n        return [\n          {\n            anchor: {\n              path: [0, 0],\n              offset: 0,\n            },\n            focus: {\n              path: [0, 0],\n              offset: 0,\n            },\n            placeholder: true,\n          },\n        ]\n      }\n      // Editor node has a path length of 0 (should never be decorated)\n      if (path.length === 0) {\n        return []\n      }\n      const result = rangeDecorationState.filter((item) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (SlateRange.isCollapsed(item)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          if (path.length !== 2) {\n            return false\n          }\n          return (\n            Path.equals(item.focus.path, path) &&\n            Path.equals(item.anchor.path, path)\n          )\n        }\n        // Include decorations that either include or intersects with this path\n        return (\n          SlateRange.intersection(item, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || SlateRange.includes(item, path)\n        )\n      })\n      if (result.length > 0) {\n        return result\n      }\n      return []\n    },\n    [slateEditor, schemaTypes, rangeDecorationState],\n  )\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  useEffect(() => {\n    const window = ReactEditor.getWindow(slateEditor)\n\n    const onDragEnd = () => {\n      editorActor.send({type: 'dragend'})\n    }\n    const onDrop = () => {\n      editorActor.send({type: 'drop'})\n    }\n\n    window.document.addEventListener('dragend', onDragEnd)\n    window.document.addEventListener('drop', onDrop)\n\n    return () => {\n      window.document.removeEventListener('dragend', onDragEnd)\n      window.document.removeEventListener('drop', onDrop)\n    }\n  }, [slateEditor, editorActor])\n\n  if (!portableTextEditor) {\n    return null\n  }\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onDragStart={(event) => {\n        props.onDragStart?.(event)\n\n        if (!event.isDefaultPrevented() && !event.isPropagationStopped()) {\n          editorActor.send({type: 'dragstart'})\n        }\n      }}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from './editor/editor-machine'\nimport {useEditor} from './editor/editor-provider'\n\n/**\n * @public\n * @deprecated\n * This component has been renamed. Use `EventListenerPlugin` instead.\n *\n * ```\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n * ```\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor])\n\n  return null\n}\n"],"names":["normalizePoint","point","value","newPath","newOffset","offset","blockKey","path","_key","childKey","block","find","blk","push","children","Array","isArray","length","child","cld","text","normalizeSelection","selection","newAnchor","newFocus","anchor","focus","isEqual","backward","DefaultBlockObject","props","$","_c","t0","Symbol","for","userSelect","t1","_type","DefaultInlineObject","DropIndicator","position","width","height","borderBottom","zIndex","debug","debugWithName","useDraggable","editor","useSlateStatic","dragGhostRef","useRef","undefined","blockElement","setBlockElement","useState","blockRef","element","current","ReactEditor","toDOMNode","useEffect","t2","event","targetBlock","IS_DRAGGING_ELEMENT_TARGET","get","set","preventDefault","stopPropagation","delete","document","body","removeChild","dragPosition","IS_DRAGGING_BLOCK_TARGET_POSITION","targetPath","findPath","myPath","isBefore","Path","originalPath","JSON","stringify","originalPath_0","equals","Transforms","moveNodes","at","to","onChange","handleDragEnd","t3","event_0","IS_DRAGGING_BLOCK_ELEMENT","target","HTMLElement","style","opacity","handleDrag","t4","event_1","IS_DRAGGING","dataTransfer","setData","effectAllowed","dragGhost","cloneNode","customGhost","querySelector","setAttribute","left","boxSizing","appendChild","rect","getBoundingClientRect","x","clientX","y","clientY","top","setDragImage","handleDragStart","readOnly","t5","draggableProps","draggable","onDragStart","onDrag","onDragEnd","useDroppable","isDragOver","setIsDragOver","isMyDragOver","dropEffect","elementRect","Y","pageY","loc","Math","abs","handleDragOver","handleDragLeave","handleDrop","isDraggingOverFirstBlock","t6","isDraggingOverLastBlock","isDraggingOverTop","isDraggingOverBottom","t7","droppableProps","onDragOver","onDragLeave","onDrop","t8","EMPTY_ANNOTATIONS","inlineBlockStyle","display","Element","attributes","schemaTypes","renderBlock","renderChild","renderListItem","renderStyle","spellCheck","selected","useSelected","inlineBlockObjectRef","focused","Range","isCollapsed","droppable","useMemo","fromSlateValue","name","KEY_TO_VALUE_ELEMENT","renderedBlock","className","blockPath","Error","isInline","Editor","node","depth","schemaType","inlineObjects","SlateElement","isElement","elmPath","debugRenders","annotations","editorElementRef","type","isListItem","blockStyleType","styles","item","level","listItem","isListBlock","listType","lists","renderProps","Object","defineProperty","enumerable","warn","propsOrDefaultRendered","blockObjects","renderedBlockFromProps","_props","displayName","EMPTY_MARKS","Leaf","editorActor","leaf","renderDecorator","renderAnnotation","spanRef","portableTextEditor","usePortableTextEditor","blockSelected","setFocused","setSelected","parent","decoratorValues","decorators","map","dec","marks","uniq","filter","mark","includes","annotationMarks","markDefs","def","Boolean","shouldTrackSelectionAndFocus","sel","PortableTextEditor","getSelection","isCollapsedSelection","startTransition","setSelectedFromRange","useCallback","winSelection","window","rangeCount","range","getRangeAt","intersectsNode","onBlur","on","onFocus","onSelection","unsubscribe","content","returnedChildren","Text","isText","span","forEach","annotation","t","_child","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","keys","cat","hotkey","isHotkey","nativeEvent","possibleMark","send","behaviorEvent","decorator","possibleCommand","command","withSyncRangeDecorations","slateEditor","syncRangeDecorations","originalApply","apply","op","getSnapshot","matches","PLACEHOLDER_STYLE","pointerEvents","right","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onClick","rangeDecorations","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","ref","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","rangeDecorationState","setRangeDecorationsState","rangeDecorationsRef","useContext","EditorActorContext","useSelector","s","context","schema","useSlate","blockTypeName","withHotKeys","renderElement","eProps","renderLeaf","lProps","rendered","placeholder","decoration","rangeDecoration","component","restoreSelectionFromProps","normalizedSelection","slateRange","toSlateRange","select","operations","some","o","operation","newSlateRanges","rangeDecorationItem","SlateRange","isRange","onMoved","newSelection","origin","newRange","moveRangeByOperation","getValue","newRangeSelection","toPortableTextRange","onReady","onInvalidValue","onValueChanged","syncedRangeDecorations","setSyncedRangeDecorations","teardown","handleCopy","clipboardData","data","handlePaste","onPasteResult","Promise","resolve","then","result","insert","insertData","insertFragment","toSlateValue","console","catch","error","finally","handleOnFocus","isDefaultPrevented","start","handleClick","focusBlockPath","slice","focusBlock","Node","descendant","_","lastNodePath","last","lastBlockPath","lastNodeFocused","lastBlockIsVoid","isTextBlock","insertNodes","pteCreateTextBlock","handleOnBlur","isPropagationStopped","handleOnBeforeInput","validateSelection","root","findDocumentOrShadowRoot","activeElement","domSelection","getWindow","existingDOMRange","newDOMRange","toDOMRange","startOffset","endOffset","removeAllRanges","addRange","deselect","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","keyboardEvent","key","code","altKey","ctrlKey","metaKey","shiftKey","handleKeyUp","onKeyUp","scrollSelectionIntoViewToSlate","noop","_editor","domRange","decorate","isEqualToEmptyEditor","intersection","addEventListener","removeEventListener","SlateEditable","EditorEventListener","useEditor","useEffectEvent","subscription"],"mappings":";;;;;;;;;;;;;AAIgBA,SAAAA,eACdC,OACAC,OAC6B;AACzB,MAAA,CAACD,SAAS,CAACC;AACN,WAAA;AAET,QAAMC,UAAgB,CAAE;AACpBC,MAAAA,YAAoBH,MAAMI,UAAU;AACxC,QAAMC,WACJ,OAAOL,MAAMM,KAAK,CAAC,KAAM,YACzB,UAAUN,MAAMM,KAAK,CAAC,KACtBN,MAAMM,KAAK,CAAC,EAAEC,MACVC,WACJ,OAAOR,MAAMM,KAAK,CAAC,KAAM,YACzB,UAAUN,MAAMM,KAAK,CAAC,KACtBN,MAAMM,KAAK,CAAC,EAAEC,MACVE,QAAuCR,MAAMS,KAChDC,CAAQA,QAAAA,IAAIJ,SAASF,QACxB;AACII,MAAAA;AACFP,YAAQU,KAAK;AAAA,MAACL,MAAME,MAAMF;AAAAA,IAAAA,CAAK;AAAA;AAExB,WAAA;AAET,MAAIE,SAAST,MAAMM,KAAK,CAAC,MAAM,YAAY;AAEvC,QAAA,CAACG,MAAMI,YACNC,MAAMC,QAAQN,MAAMI,QAAQ,KAAKJ,MAAMI,SAASG,WAAW;AAErD,aAAA;AAET,UAAMC,QACJH,MAAMC,QAAQN,MAAMI,QAAQ,KAC5BJ,MAAMI,SAASH,KAAMQ,CAAAA,QAAQA,IAAIX,SAASC,QAAQ;AAChDS,QAAAA;AACFf,cAAQU,KAAK,UAAU,GACvBV,QAAQU,KAAK;AAAA,QAACL,MAAMU,MAAMV;AAAAA,MAAAA,CAAK,GAC/BJ,YACEc,MAAME,QAAQF,MAAME,KAAKH,UAAUhB,MAAMI,SACrCJ,MAAMI,SACLa,MAAME,QAAQF,MAAME,KAAKH,UAAW;AAAA;AAEpC,aAAA;AAAA,EAAA;AAGJ,SAAA;AAAA,IAACV,MAAMJ;AAAAA,IAASE,QAAQD;AAAAA,EAAS;AAC1C;AAEgBiB,SAAAA,mBACdC,WACApB,OACwB;AACxB,MAAI,CAACoB,aAAa,CAACpB,SAASA,MAAMe,WAAW;AACpC,WAAA;AAELM,MAAAA,YAAyC,MACzCC,WAAwC;AACtC,QAAA;AAAA,IAACC;AAAAA,IAAQC;AAAAA,EAAAA,IAASJ;AAUxB,SAREG,UACAvB,MAAMS,KAAMC,CAAAA,QAAQe,QAAQ;AAAA,IAACnB,MAAMI,IAAIJ;AAAAA,EAAAA,GAAOiB,OAAOlB,KAAK,CAAC,CAAC,CAAC,MAE7DgB,YAAYvB,eAAeyB,QAAQvB,KAAK,IAEtCwB,SAASxB,MAAMS,KAAMC,SAAQe,QAAQ;AAAA,IAACnB,MAAMI,IAAIJ;AAAAA,EAAOkB,GAAAA,MAAMnB,KAAK,CAAC,CAAC,CAAC,MACvEiB,WAAWxB,eAAe0B,OAAOxB,KAAK,IAEpCqB,aAAaC,WACR;AAAA,IAACC,QAAQF;AAAAA,IAAWG,OAAOF;AAAAA,IAAUI,UAAUN,UAAUM;AAAAA,EAAAA,IAE3D;AACT;AC1EO,SAAAC,mBAAAC,OAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA;AAAAC,MAAAA;AAAAF,IAAA,CAAA,MAAAG,OAAAC,IAAA,2BAAA,KAISF,KAAA;AAAA,IAAAG,YAAa;AAAA,EAAA,GAAOL,OAAAE,MAAAA,KAAAF,EAAA,CAAA;AAAAM,MAAAA;AAAA,SAAAN,EAAA,CAAA,MAAAD,MAAA5B,MAAAM,QAAAuB,EAAAD,CAAAA,MAAAA,MAAA5B,MAAAoC,SAAhCD,KAAA,qBAAA,OAAA,EAAY,OAAAJ,IAAsB,UAAA;AAAA,IAAA;AAAA,IAC9BH,MAAK5B,MAAAoC;AAAAA,IAAa;AAAA,IAAGR,MAAK5B,MAAAM;AAAAA,IAAY;AAAA,EAAA,GAC1C,GAAMuB,EAAAD,CAAAA,IAAAA,MAAA5B,MAAAM,MAAAuB,EAAAD,CAAAA,IAAAA,MAAA5B,MAAAoC,OAAAP,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAFNM;AAEM;AAIH,SAAAE,oBAAAT,OAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA;AAAAC,MAAAA;AAAAF,IAAA,CAAA,MAAAG,OAAAC,IAAA,2BAAA,KAIUF,KAAA;AAAA,IAAAG,YAAa;AAAA,EAAA,GAAOL,OAAAE,MAAAA,KAAAF,EAAA,CAAA;AAAAM,MAAAA;AAAA,SAAAN,EAAA,CAAA,MAAAD,MAAA5B,MAAAM,QAAAuB,EAAAD,CAAAA,MAAAA,MAAA5B,MAAAoC,SAAjCD,KAAA,qBAAA,QAAA,EAAa,OAAAJ,IAAsB,UAAA;AAAA,IAAA;AAAA,IAC/BH,MAAK5B,MAAAoC;AAAAA,IAAa;AAAA,IAAGR,MAAK5B,MAAAM;AAAAA,IAAY;AAAA,EAAA,GAC1C,GAAOuB,EAAAD,CAAAA,IAAAA,MAAA5B,MAAAM,MAAAuB,EAAAD,CAAAA,IAAAA,MAAA5B,MAAAoC,OAAAP,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAFPM;AAEO;AClBJ,SAAAG,gBAAA;AAAAT,QAAAA,IAAAC,EAAA,CAAA;AAAAC,MAAAA;AAAA,SAAAF,EAAA,CAAA,MAAAG,OAAAC,IAAA,2BAAA,KAEHF,kCACY,WAAA,qBACH,OAAA;AAAA,IAAAQ,UACK;AAAA,IAAUC,OACb;AAAA,IAAMC,QAAA;AAAA,IAAAC,cAEC;AAAA,IAAwBC,QAAA;AAAA,EAAA,GAGxC,GAAAd,OAAAE,MAAAA,KAAAF,EAAA,CAAA,GATFE;AASE;ACON,MAAMa,UAAQC,cAAc,cAAc;AAWnC,SAAAC,aAAAlB,OAAA;AAAA,QAAAC,IAAAC,EAAA,EAAA,GAKLiB,SAAeC,kBACfC,eAAqBC,OAAAC,MAA6B,GAClD,CAAAC,cAAAC,eAAA,IAAwCC,aAAiC;AAAC,MAAAvB,IAAAI;AAAAN,IAAA,CAAA,MAAAkB,UAAAlB,EAAAD,CAAAA,MAAAA,MAAA2B,YAAA1B,EAAAD,CAAAA,MAAAA,MAAA4B,WAGxEzB,KAAAA,MACEsB,gBACEzB,MAAK2B,WACD3B,MAAK2B,SAAAE,UACLC,YAAAC,UAAsBZ,QAAQnB,MAAK4B,OAAQ,CACjD,GACFrB,KAAA,CAACY,QAAQnB,MAAK4B,SAAU5B,MAAK2B,QAAA,GAAU1B,OAAAkB,QAAAlB,EAAA,CAAA,IAAAD,MAAA2B,UAAA1B,EAAA,CAAA,IAAAD,MAAA4B,SAAA3B,OAAAE,IAAAF,OAAAM,OAAAJ,KAAAF,EAAA,CAAA,GAAAM,KAAAN,EAAA,CAAA,IAPzC+B,UACE7B,IAMAI,EACF;AAAC0B,MAAAA;AAAAhC,WAAAkB,UAAAlB,EAAAD,CAAAA,MAAAA,MAAA4B,WAICK,KAAAC,CAAA,UAAA;AACEC,UAAAA,cAAoBC,2BAAAC,IAA+BlB,MAAM;AAAC,QACtDgB,aAAW;AACbG,kBAAAA,IAAgBnB,UAAa,GAC7Be,MAAKK,eAAgB,GACrBL,MAAKM,gBACLJ,GAAAA,2BAAAK,OAAkCtB,MAAM,GACpCE,aAAYQ,YACdb,QAAM,qBAAqB,GAC3B0B,SAAAC,KAAAC,YAA0BvB,aAAYQ,OAAQ;AAEhDgB,YAAAA,eAAqBC,kCAAAT,IAAsClB,MAAM;AACjE2B,wCAAAL,OAAyCtB,MAAM;AAC/C,UAAA4B,aAAiBjB,YAAAkB,SAAqB7B,QAAQgB,WAAW;AACzDc,YAAAA,SAAenB,YAAAkB,SAAqB7B,QAAQnB,MAAK4B,OAAQ,GACzDsB,WAAiBC,KAAAD,SAAcD,QAAQF,UAAU;AAC7CF,UAAAA,iBAAiB,YAAQ,CAAKK,UAAQ;AAAA,YAEpCH,WAAiB5B,CAAAA,KAAAA,OAAMnC,SAAAG,SAAoB,GAAA;AAC7C6B,kBAAM,6CAA6C;AAAC;AAAA,QAAA;AAGtD,cAAAoC,eAAqBL;AACrBA,qBAAaA,KAAAA,KAAUA,UAAU,GACjC/B,QACE,6BAA6BqC,KAAAC,UAAeF,YAAY,CAAC,OAAOC,KAAAC,UAC9DP,UACF,CAAC,EACH;AAAA,MAAA;AAGAF,UAAAA,iBAAiB,SACjBK,YACAH,WAAU,CAAA,MAAQ5B,OAAMnC,SAAAG,SAAoB,GAAA;AAE5C,cAAAoE,iBAAqBR;AACrBA,qBAAaA,KAAAA,SAAcA,UAAU,GACrC/B,QACE,6BAA6BqC,KAAAC,UAAeF,cAAY,CAAC,OAAOC,KAAAC,UAC9DP,UACF,CAAC,EACH;AAAA,MAAA;AAAC,UAECI,KAAAK,OAAYT,YAAYE,MAAM,GAAC;AAC5BV,cAAAA,eAAAA,GACLvB,QAAM,+CAA+C;AAAC;AAAA,MAAA;AAItDA,cAAA,kBAAkBhB,MAAK4B,QAAAlD,IAAA,cAA2B2E,KAAAC,UAAeL,MAAM,CAAC,OAAOI,KAAAC,UAC7EP,UACF,CAAC,KAAKF,YAAY,GACpB,GACAY,WAAAC,UAAqBvC,QAAM;AAAA,QAAAwC,IAAOV;AAAAA,QAAMW,IAAMb;AAAAA,MAAAA,CAAW,GACzD5B,OAAM0C,SAAU;AAAC;AAAA,IAAA;AAGnB7C,YAAM,uCAAuC;AAAA,EAAA,GAC9Cf,OAAAkB,QAAAlB,EAAA,CAAA,IAAAD,MAAA4B,SAAA3B,OAAAgC,MAAAA,KAAAhC,EAAA,CAAA;AA3DH,QAAA6D,gBAAsB7B;AA6DrB8B,MAAAA;AAAA9D,WAAAkB,UAAAlB,EAAAD,CAAAA,MAAAA,MAAA4B,WAICmC,KAAAC,CAAA,YAAA;AACE1B,gBAAAA,IAAgBnB,UAAY,GAC5B8C,0BAAA3B,IAA8BnB,QAAQnB,MAAK4B,OAAQ,GACnDM,QAAKM,gBAAiB;AAEtB,UAAA0B,SAAehC,QAAKgC;AAEhBA,sBAAMC,gBACRD,OAAME,MAAAC,UAAiB;AAAA,EAAA,GAE1BpE,OAAAkB,QAAAlB,EAAA,CAAA,IAAAD,MAAA4B,SAAA3B,QAAA8D,MAAAA,KAAA9D,EAAA,EAAA;AAXH,QAAAqE,aAAmBP;AAalBQ,MAAAA;AAAAtE,IAAAuB,EAAAA,MAAAA,gBAAAvB,UAAAkB,UAAAlB,EAAA,EAAA,MAAAqE,cAICC,KAAAC,CAAA,YAAA;AACExD,QAAAA,QAAM,YAAY,GAClByD,YAAAnC,IAAgBnB,UAAY,GACxBe,QAAKwC,iBACPxC,QAAKwC,aAAAC,QAAsB,6BAA6B,WAAW,GACnEzC,QAAKwC,aAAAE,gBAA8B,SAKjCpD,gBAAgBA,wBAAY2C,aAAuB;AACrDU,UAAAA,YAAgBrD,aAAYsD,YAAe;AAC3CC,YAAAA,cAAoBF,UAASG,cAC3B,8BACF;AACID,UAAAA,gBACFF,YAAYE,cAIdF,UAASI,aAAc,gBAAgB,EAAE,GAACvC,SAAAC,MAAA;AAGxCtB,qBAAYQ,UAAWgD,WACvBA,UAAST,MAAAzD,WAAkB,YAC3BkE,UAAST,MAAAc,OAAc,YACvBL,UAAST,MAAAe,YAAmB,cAC5BzC,SAAAC,KAAAyC,YAA0BP,SAAS;AACnC,cAAAQ,OAAa7D,aAAY8D,sBAAuB,GAChDC,IAAUrD,QAAKsD,UAAWH,KAAIH,MAC9BO,IAAUvD,QAAKwD,UAAWL,KAAIM;AAC9Bd,kBAAST,MAAAxD,QAAe,GAAGyE,KAAIzE,KAAA,MAC/BiE,UAAST,MAAAvD,SAAgB,GAAGwE,KAAIxE,MAAA,MAChCqB,QAAKwC,aAAAkB,aAA2Bf,WAAWU,GAAGE,CAAC;AAAA,MAAA;AAAA,IAAC;AAGpDnB,eAAWpC,OAAK;AAAA,EAAA,GACjBjC,QAAAuB,cAAAvB,QAAAkB,QAAAlB,QAAAqE,YAAArE,QAAAsE,MAAAA,KAAAtE,EAAA,EAAA;AAtCH,QAAA4F,kBAAwBtB;AAwCvB,MAEGvE,MAAK8F,UAAA;AAAAC,QAAAA;AAAA,WAAA9F,EAAA,EAAA,MAAAG,OAAAC,IAAA,2BAAA,KACA0F,MAAA;AAAA,MAAAC,gBAAA;AAAA,QAAAC,WAAA;AAAA,QAAAC,aAAA3E;AAAAA,QAAA4E,QAAA5E;AAAAA,QAAA6E,WAAA7E;AAAAA,MAAAA;AAAAA,IAAA,GAONtB,QAAA8F,OAAAA,MAAA9F,EAAA,EAAA,GAPM8F;AAAAA,EAAAA;AAONA,MAAAA;AAAA,SAAA9F,EAAAqE,EAAAA,MAAAA,cAAArE,UAAA6D,iBAAA7D,EAAA,EAAA,MAAA4F,mBAGIE,KAAA;AAAA,IAAAC,gBAAA;AAAA,MAAAC,WAAA;AAAA,MAAAC,aAGUL;AAAAA,MAAeM,QACpB7B;AAAAA,MAAU8B,WACPtC;AAAAA,IAAAA;AAAAA,EAAa,GAE3B7D,QAAAqE,YAAArE,QAAA6D,eAAA7D,QAAA4F,iBAAA5F,QAAA8F,MAAAA,KAAA9F,EAAA,EAAA,GAPM8F;AAON;AClLH,MAAM/E,UAAQC,cAAc,cAAc;AAYnC,SAAAoF,aAAArG,OAAA;AAAA,QAAAC,IAAAC,EAAA,EAAA,GAKLiB,SAAeC,kBACf,CAAAkF,YAAAC,aAAA,IAAoC7E,WAAc,GAClD,CAAAF,cAAAC,eAAA,IAAwCC,aAAiC;AAAC,MAAAvB,IAAAI;AAAAN,IAAA,CAAA,MAAAkB,UAAAlB,EAAAD,CAAAA,MAAAA,MAAA2B,YAAA1B,EAAAD,CAAAA,MAAAA,MAAA4B,WAGxEzB,KAAAA,MACEsB,gBACEzB,MAAK2B,WACD3B,MAAK2B,SAAAE,UACLC,YAAAC,UAAsBZ,QAAQnB,MAAK4B,OAAQ,CACjD,GACFrB,KAAA,CAACY,QAAQnB,MAAK4B,SAAU5B,MAAK2B,QAAA,GAAU1B,OAAAkB,QAAAlB,EAAA,CAAA,IAAAD,MAAA2B,UAAA1B,EAAA,CAAA,IAAAD,MAAA4B,SAAA3B,OAAAE,IAAAF,OAAAM,OAAAJ,KAAAF,EAAA,CAAA,GAAAM,KAAAN,EAAA,CAAA,IAPzC+B,UACE7B,IAMAI,EACF;AAAC0B,MAAAA;AAAAhC,IAAA,CAAA,MAAAuB,gBAAAvB,EAAA,CAAA,MAAAkB,UAAAlB,EAAA,CAAA,MAAAD,MAAA4B,WAGCK,KAAAC,CAAA,UAAA;AACEsE,UAAAA,eAAqBvC,0BAAA5B,IAA8BlB,MAAM;AAErD,QAAA,CAACqF,gBAAY,CAAKhF;AAAY;AAG7Be,UAAAA,eAAAA,GACLL,MAAKwC,aAAA+B,aAA2B,QAChCrE,2BAAAE,IAA+BnB,QAAQnB,MAAK4B,OAAQ;AACpD,UAAA8E,cAAoBlF,aAAY8D,sBAAAA,GAChC/G,SAAemI,YAAWf,KAC1B9E,SAAe6F,YAAW7F,QAC1B8F,IAAUzE,MAAK0E,OACfC,MAAYC,KAAAC,IAASxI,SAASoI,CAAC;AAE3B3G,QAAAA,MAAK4B,YAAaT,OAAMnC,SAAY,CAAA,MAE7B6H,MAAMhG,SAAU,IAEzBiC,kCAAAR,IAAsCnB,QAD3B,KAC2C,IAGtD2B,kCAAAR,IAAsCnB,QAD3B,QAC2C,IAEpDqF,iBAAiBxG,MAAK4B,SAAQ;AAChCM,YAAKwC,aAAA+B,aAA2B;AAAM;AAAA,IAAA;AAGxCF,oBAAkB;AAAA,EAAA,GACnBtG,OAAAuB,cAAAvB,OAAAkB,QAAAlB,EAAA,CAAA,IAAAD,MAAA4B,SAAA3B,OAAAgC,MAAAA,KAAAhC,EAAA,CAAA;AA9BH,QAAA+G,iBAAuB/E;AAgCtB8B,MAAAA;AAAA9D,IAAA,CAAA,MAAAG,OAAAC,IAAA,2BAAA,KAEmC0D,KAAAA,MAAA;AAClCwC,oBAAmB;AAAA,EAAA,GACpBtG,OAAA8D,MAAAA,KAAA9D,EAAA,CAAA;AAFD,QAAAgH,kBAAwBlD;AAElBQ,MAAAA;AAAAtE,YAAAkB,UAAAlB,EAAAD,EAAAA,MAAAA,MAAA4B,WAGJ2C,KAAAP,CAAA,YAAA;AACMC,8BAAA5B,IAA8BlB,MAAM,MACtCH,QAAM,uBAAuBhB,MAAK4B,OAAQ,GAC1CM,QAAKK,eACLL,GAAAA,QAAKM,gBAAiB,GACtB+D,gBAAmB;AAAA,EAAA,GAEtBtG,QAAAkB,QAAAlB,EAAA,EAAA,IAAAD,MAAA4B,SAAA3B,QAAAsE,MAAAA,KAAAtE,EAAA,EAAA;AARH,QAAAiH,aAAmB3C;AAUlBwB,MAAAA;AAAA9F,IAAAkB,EAAAA,MAAAA,UAAAlB,UAAAqG,cAGCP,KAAAO,cAAcnF,OAAMnC,SAAiBoD,CAAAA,MAAAA,2BAAAC,IAA+BlB,MAAM,GAAClB,QAAAkB,QAAAlB,QAAAqG,YAAArG,QAAA8F,MAAAA,KAAA9F,EAAA,EAAA;AAD7E,QAAAkH,2BACEpB;AAA2EqB,MAAAA;AAAAnH,IAAAkB,EAAAA,MAAAA,UAAAlB,UAAAqG,cAE3Ec,KAAAd,cACAnF,OAAMnC,SAAUmC,OAAMnC,SAAAG,UAAoB,MACxCiD,2BAAAC,IAA+BlB,MAAM,GAAClB,QAAAkB,QAAAlB,QAAAqG,YAAArG,QAAAmH,MAAAA,KAAAnH,EAAA,EAAA;AAH1CoH,QAAAA,0BACED,IAGFvE,eAAqBC,kCAAAT,IAAsClB,MAAM,GAEjEmG,oBACEH,4BACCb,cAAU,CACRa,4BAAwB,CACxBE,2BACDxE,iBAAiB,OACrB0E,uBACEF,2BACCf,cAAU,CACRa,4BAAwB,CACxBE,2BACDxE,iBAAiB;AAAS,MAE1B7C,MAAK8F,UAAA;AAAA0B,QAAAA;AAAA,WAAAvH,EAAA,EAAA,MAAAG,OAAAC,IAAA,2BAAA,KACAmH,MAAA;AAAA,MAAAC,gBAAA;AAAA,QAAAC,YAAAnG;AAAAA,QAAAoG,aAAApG;AAAAA,QAAAqG,QAAArG;AAAAA,MAAA;AAAA,MAAA+F,mBAAA;AAAA,MAAAC,sBAAA;AAAA,IAAA,GAQNtH,QAAAuH,OAAAA,MAAAvH,EAAA,EAAA,GARMuH;AAAAA,EAAAA;AAQNA,MAAAA;AAAAvH,IAAA+G,EAAAA,MAAAA,kBAAA/G,UAAAiH,cAIeM,KAAA;AAAA,IAAAE,YACFV;AAAAA,IAAcW,aACbV;AAAAA,IAAeW,QACpBV;AAAAA,EACTjH,GAAAA,QAAA+G,gBAAA/G,QAAAiH,YAAAjH,QAAAuH,MAAAA,KAAAvH,EAAA,EAAA;AAAA4H,MAAAA;AAAA,SAAA5H,EAAAsH,EAAAA,MAAAA,wBAAAtH,UAAAqH,qBAAArH,EAAA,EAAA,MAAAuH,MALIK,KAAA;AAAA,IAAAJ,gBACWD;AAAAA,IAIfF;AAAAA,IAAAC;AAAAA,EAAAA,GAGFtH,QAAAsH,sBAAAtH,QAAAqH,mBAAArH,QAAAuH,IAAAvH,QAAA4H,MAAAA,KAAA5H,EAAA,EAAA,GARM4H;AAQN;ACjGW5G,cAAc,oBAAoB;AAAA,MAE1C6G,oBAA0C,CAAE,GAkB5CC,mBAAmB;AAAA,EAACC,SAAS;AAAc,GAMpCC,UAA2CA,CAAC;AAAA,EACvDC;AAAAA,EACAlJ;AAAAA,EACA4C;AAAAA,EACAuG;AAAAA,EACArC;AAAAA,EACAsC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AACF,MAAM;AACErH,QAAAA,SAASC,kBACTqH,WAAWC,YAAAA,GACX/G,WAAWL,OAA8B,IAAI,GAC7CqH,uBAAuBrH,OAAO,IAAI,GAClCsH,UACHH,YAAYtH,OAAO3B,aAAaqJ,MAAMC,YAAY3H,OAAO3B,SAAS,KACnE,IACIuJ,YAAY1C,aAAa;AAAA,IAACzE;AAAAA,IAASD;AAAAA,IAAUmE;AAAAA,EAAAA,CAAS,GACtDG,YAAY/E,aAAa;AAAA,IAACU;AAAAA,IAASD;AAAAA,IAAUmE;AAAAA,EAAAA,CAAS,GAEtD1H,QAAQ4K,QACZ,MACEC,eACE,CAACrH,OAAO,GACRuG,YAAYvJ,MAAMsK,MAClBC,qBAAqB9G,IAAIlB,MAAM,CACjC,EAAE,CAAC,GACL,CAACA,QAAQS,SAASuG,YAAYvJ,MAAMsK,IAAI,CAC1C;AAEA,MAAIE,gBAAgBpK,UAEhBqK;AAEEC,QAAAA,YAAkBN,QAAQ,MAAM,CAAC;AAAA,IAACtK,MAAMkD,QAAQlD;AAAAA,EAAAA,CAAK,GAAG,CAACkD,OAAO,CAAC;AAEnE,MAAA,OAAOA,QAAQpB,SAAU;AACrB,UAAA,IAAI+I,MAAM,2CAA2C;AAGzD,MAAA,OAAO3H,QAAQlD,QAAS;AACpB,UAAA,IAAI6K,MAAM,0CAA0C;AAIxDpI,MAAAA,OAAOqI,SAAS5H,OAAO,GAAG;AAC5B,UAAMnD,OAAOqD,YAAYkB,SAAS7B,QAAQS,OAAO,GAC3C,CAAChD,KAAK,IAAI6K,OAAOC,KAAKvI,QAAQ1C,MAAM;AAAA,MAACkL,OAAO;AAAA,IAAE,CAAA,GAC9CC,aAAazB,YAAY0B,cAAchL,KAC1C2B,CAAUA,UAAAA,MAAM0I,SAAStH,QAAQpB,KACpC;AACA,QAAI,CAACoJ;AACG,YAAA,IAAIL,MAAM,8CAA8C;AAE5DO,QAAAA,UAAaC,UAAUnL,KAAK,GAAG;AACjC,YAAMoL,UAAgB,CACpB;AAAA,QAACtL,MAAME,MAAMF;AAAAA,SACb,YACA;AAAA,QAACA,MAAMkD,QAAQlD;AAAAA,MAAAA,CAAK;AAElBuL,aAIF,qBAAC,QAAK,EAAA,GAAI/B,YAEPlJ,UAAAA;AAAAA,QAAAA;AAAAA,QACA,qBAAA,QAAA,EACC,WAAW,CAAC8G,UACZ,WAAU,oBACV,eAAY,oBACZ,KAAK6C,sBAEL,OAAOZ,kBACP,iBAAiB,IAEhBM,UAAAA;AAAAA,UAAAA,eACCA,YAAY;AAAA,YACV6B,aAAapC;AAAAA;AAAAA,YACb9I,UAAW,oBAAA,qBAAA,EAAoB,MAAgB,CAAA;AAAA,YAC/CmL,kBAAkBxB;AAAAA,YAClBC;AAAAA,YACAnK,MAAMuL;AAAAA,YACNJ;AAAAA,YACAnB;AAAAA,YACA2B,MAAMR;AAAAA,YACNxL;AAAAA,UAAAA,CACD;AAAA,UACF,CAACiK,eAAgB,oBAAA,qBAAA,EAAoB,MAAgB,CAAA;AAAA,QAAA,EAAA,GAhBjDzG,QAAQlD,IAiBf;AAAA,MAAA,GACF;AAAA,IAAA;AAGE,UAAA,IAAI6K,MAAM,kBAAkB;AAAA,EAAA;AAKpC,MAAI3H,QAAQpB,UAAU2H,YAAYvJ,MAAMsK,MAAM;AAChC,gBAAA;AACZ,UAAMmB,aAAa,cAAczI,SAI3BwC,QAAS,WAAWxC,WAAWA,QAAQwC,SAAU;AACvDiF,gBAAY,8CAA8CjF,KAAK;AAC/D,UAAMkG,iBAAiBnC,YAAYoC,OAAO1L,KACvC2L,CAASA,SAAAA,KAAKpM,UAAUgG,KAC3B;AACImE,mBAAe+B,mBACjBlB,gBAAgBb,YAAY;AAAA,MAC1B3J,OAAOgD;AAAAA,MACP5C;AAAAA,MACA4J;AAAAA,MACAH;AAAAA,MACArK,OAAOgG;AAAAA,MACP3F,MAAM6K;AAAAA,MACNM,YAAYU;AAAAA,MACZH,kBAAkBxI;AAAAA,IAAAA,CACnB;AAEC8I,QAAAA;AAEAJ,QAAAA,eACE,OAAOzI,QAAQ6I,SAAU,aAC3BA,QAAQ7I,QAAQ6I,QAElBpB,aAAa,8BAA8BzH,QAAQ8I,QAAQ,uBAAuBD,SAAS,CAAC,KAG1FtJ,OAAOwJ,YAAYvM,KAAK,KAAKiM,cAAczI,QAAQ8I,UAAU;AACzDE,YAAAA,WAAWzC,YAAY0C,MAAMhM,KAChC2L,YAASA,OAAKpM,UAAUwD,QAAQ8I,QACnC;AACIpC,wBAAkBsC,aACpBxB,gBAAgBd,eAAe;AAAA,QAC7B1J,OAAOR;AAAAA,QACPY,UAAUoK;AAAAA,QACVR;AAAAA,QACAH;AAAAA,QACArK,OAAOwD,QAAQ8I;AAAAA,QACfjM,MAAM6K;AAAAA,QACNM,YAAYgB;AAAAA,QACZH,OAAOrM,MAAMqM,SAAS;AAAA,QACtBN,kBAAkBxI;AAAAA,MAAAA,CACnB;AAAA,IAAA;AAICmJ,UAAAA,cAA8CC,OAAOC,eACzD;AAAA,MACEhM,UAAUoK;AAAAA,MACVe,kBAAkBxI;AAAAA,MAClBiH;AAAAA,MACA6B;AAAAA,MACAC,UAAUL,aAAazI,QAAQ8I,WAAWnJ;AAAAA,MAC1C9C,MAAM6K;AAAAA,MACNb;AAAAA,MACArE;AAAAA,MACAwF,YAAYzB,YAAYvJ;AAAAA,MACxBR;AAAAA,OAEF,QACA;AAAA,MACE6M,YAAY;AAAA,MACZ5I,MAAM;AACI6I,eAAAA,QAAAA,KACN,0DACF,GACO/C,YAAYvJ;AAAAA,MAAAA;AAAAA,IAGzB,CAAA,GAEMuM,yBAAyB/C,cAC3BA,YAAY0C,WAA+B,IAC3C9L;AAGF,WAAA,qBAAC,SAEC,GAAIkJ,YACJ,WACA,YACA,GAAIa,UAAUtB,gBAEbsB,UAAAA;AAAAA,MAAUzB,UAAAA,oBAAqB,oBAAA,eAAA,CAAA,CAAgB,IAAG;AAAA,MAClD,oBAAA,OAAA,EAAI,KAAK3F,UAAWwJ,UAAuB,wBAAA;AAAA,MAC3CpC,UAAUxB,uBAAwB,oBAAA,eAAA,CAAgB,CAAA,IAAG;AAAA,IAAA,EAAA,GARjD3F,QAAQlD,IASf;AAAA,EAAA;AAIEkL,QAAAA,eAAazB,YAAYiD,aAAavM,KACzC2B,aAAUA,QAAM0I,SAAStH,QAAQpB,KACpC;AAEA,MAAI,CAACoJ;AACH,UAAM,IAAIL,MACR,yDAAyD3H,QAAQpB,KAAK,EACxE;AAOF6I,cAAY;AAEZ,QAAMzK,UAAQqK,eACZ,CAACrH,OAAO,GACRuG,YAAYvJ,MAAMsK,MAClBC,qBAAqB9G,IAAIlB,MAAM,CACjC,EAAE,CAAC;AAECkK,MAAAA;AAEJ,MAAIjD,aAAa;AACTkD,UAAAA,SAAyCP,OAAOC,eACpD;AAAA,MACEhM,UAAW,oBAAA,oBAAA,EAAmB,MAAgB,CAAA;AAAA,MAC9CmL,kBAAkBxI;AAAAA,MAClBiH;AAAAA,MACAnK,MAAM6K;AAAAA,MACNM,YAAAA;AAAAA,MACAnB;AAAAA,MACArK,OAAOQ;AAAAA,OAET,QACA;AAAA,MACEqM,YAAY;AAAA,MACZ5I,MAAM;AACI6I,eAAAA,QAAAA,KACN,0DACF,GACOtB;AAAAA,MAAAA;AAAAA,IACT,CAEJ;AACAyB,6BAAyBjD,YAAYkD,MAA0B;AAAA,EAAA;AAI/D,SAAA,qBAAC,OAEC,EAAA,GAAIpD,YACJ,cACIa,UAAUtB,gBACd,GAAIxB,UAAUD,gBAEb+C,UAAAA;AAAAA,IAAUzB,UAAAA,oBAAqB,oBAAA,eAAA,CAAA,CAAgB,IAAG;AAAA,IAClDtI;AAAAA,IACD,oBAAC,OAAI,EAAA,KAAK2C,UAAU,iBAAiB,IAClC0J,UAGC,0BAAA,oBAAC,oBAAmB,EAAA,MAAA,CACrB,EACH,CAAA;AAAA,IACCtC,UAAUxB,uBAAwB,oBAAA,eAAA,CAAgB,CAAA,IAAG;AAAA,EAAA,EAAA,GAfjD3F,QAAQlD,IAgBf;AAEJ;AAEAuJ,QAAQsD,cAAc;ACzStB,MAAMvK,UAAQC,cAAc,iBAAiB,GAEvCuK,cAAwB,CAAE,GAmBnBC,OAAQzL,CAAqB,UAAA;AAClC,QAAA;AAAA,IACJ0L;AAAAA,IACAxD;AAAAA,IACAlJ;AAAAA,IACA2M;AAAAA,IACAxD;AAAAA,IACAE;AAAAA,IACAuD;AAAAA,IACAC;AAAAA,EACE7L,IAAAA,OACE8L,UAAUxK,OAAoB,IAAI,GAClCyK,qBAAqBC,yBACrBC,gBAAgBvD,YAAY,GAC5B,CAACE,SAASsD,UAAU,IAAIxK,SAAS,EAAK,GACtC,CAAC+G,UAAU0D,WAAW,IAAIzK,SAAS,EAAK,GACxC9C,QAAQI,SAASgB,MAAMoM,QACvB3N,OAAauK,QACjB,MAAOpK,QAAQ,CAAC;AAAA,IAACF,MAAME,OAAOF;AAAAA,KAAO,YAAY;AAAA,IAACA,MAAMiN,KAAKjN;AAAAA,EAAAA,CAAK,IAAI,IACtE,CAACE,OAAO+M,KAAKjN,IAAI,CACnB,GACM2N,kBAAkBrD,QACtB,MAAMb,YAAYmE,WAAWC,IAAKC,CAAAA,QAAQA,IAAIpO,KAAK,GACnD,CAAC+J,YAAYmE,UAAU,CACzB,GACMG,QAAkBzD,QACtB,MACE0D,MACGf,KAAKc,SAASjB,aAAamB,OAAQC,CAAAA,SAClCP,gBAAgBQ,SAASD,IAAI,CAC/B,CACF,GACF,CAACP,iBAAiBV,KAAKc,KAAK,CAC9B,GACMK,kBAAkB7N,MAAMC,QAAQyM,KAAKc,KAAK,IAAId,KAAKc,QAAQjB,aAC3DtB,cAAclB,QAClB,MACE8D,gBACGP,IACEK,YACC,CAACP,gBAAgBQ,SAASD,MAAI,KAC9BhO,OAAOmO,UAAUlO,KAAMmO,CAAQA,QAAAA,IAAItO,SAASkO,MAAI,CACpD,EACCD,OAAOM,OAAO,GACnB,CAACH,iBAAiBlO,OAAOyN,eAAe,CAC1C,GAEMa,+BAA+BhD,YAAY/K,SAAS,KAAK8M;AAE/DjK,YAAU,MAAM;AACd,QAAI,CAACkL,8BAA8B;AACjChB,iBAAW,EAAK;AAChB;AAAA,IAAA;AAEIiB,UAAAA,MAAMC,mBAAmBC,aAAatB,kBAAkB;AAE5DoB,WACAtN,QAAQsN,IAAIvN,MAAMnB,MAAMA,IAAI,KAC5B2O,mBAAmBE,qBAAqBvB,kBAAkB,KAE1DwB,gBAAgB,MAAM;AACpBrB,iBAAW,EAAI;AAAA,IAAA,CAChB;AAAA,EAEF,GAAA,CAACgB,8BAA8BzO,MAAMsN,kBAAkB,CAAC;AAGrDyB,QAAAA,uBAAuBC,YAAY,MAAM;AAC7C,QAAI,CAACP;AACH;AAEFlM,YAAM,wCAAwC;AACxC0M,UAAAA,eAAeC,OAAON,aAAa;AACzC,QAAI,CAACK,cAAc;AACjBvB,kBAAY,EAAK;AACjB;AAAA,IAAA;AAEEuB,QAAAA,gBAAgBA,aAAaE,aAAa,GAAG;AACzCC,YAAAA,QAAQH,aAAaI,WAAW,CAAC;AACnChC,cAAQjK,WAAWgM,MAAME,eAAejC,QAAQjK,OAAO,IACzDsK,YAAY,EAAI,IAEhBA,YAAY,EAAK;AAAA,IAErB;AACEA,kBAAY,EAAK;AAAA,EAAA,GAElB,CAACe,4BAA4B,CAAC;AAEjClL,YAAU,MAAM;AACd,QAAI,CAACkL;AACH;AAGF,UAAMc,SAAStC,YAAYuC,GAAG,QAAQ,MAAM;AAC/B,iBAAA,EAAK,GAChB9B,YAAY,EAAK;AAAA,IAClB,CAAA,GAEK+B,UAAUxC,YAAYuC,GAAG,SAAS,MAAM;AACtCd,YAAAA,QAAMC,mBAAmBC,aAAatB,kBAAkB;AAE5DoB,eACAtN,QAAQsN,MAAIvN,MAAMnB,MAAMA,IAAI,KAC5B2O,mBAAmBE,qBAAqBvB,kBAAkB,KAE1DG,WAAW,EAAI,GAEjBsB,qBAAqB;AAAA,IAAA,CACtB,GAEKW,cAAczC,YAAYuC,GAAG,aAAc/L,CAAU,UAAA;AAEvDA,YAAM1C,aACNK,QAAQqC,MAAM1C,UAAUI,MAAMnB,MAAMA,IAAI,KACxC2O,mBAAmBE,qBAAqBvB,kBAAkB,IAE1DG,WAAW,EAAI,IAEfA,WAAW,EAAK,GAElBsB,qBAAqB;AAAA,IAAA,CACtB;AAED,WAAO,MAAM;AACXQ,aAAOI,eACPF,QAAQE,YAAY,GACpBD,YAAYC,YAAY;AAAA,IAC1B;AAAA,EACC,GAAA,CACD1C,aACAjN,MACAsN,oBACAyB,sBACAN,4BAA4B,CAC7B,GAEDlL,UAAU,MAAMwL,wBAAwB,CAACA,oBAAoB,CAAC;AAExDa,QAAAA,UAAUrF,QAAQ,MAAM;AAC5B,QAAIsF,mBAAmBtP;AAEnBuP,QAAAA,KAAKC,OAAO7C,IAAI,KAAKA,KAAKnL,UAAU2H,YAAYsG,KAAKvF,SACvDuD,MAAMiC,QAAS9B,CAAS,WAAA;AACtB,YAAMhD,aAAazB,YAAYmE,WAAWzN,KACvC2N,CAAQA,UAAAA,MAAIpO,UAAUwO,MACzB;AACA,UAAIhD,cAAcgC,iBAAiB;AAC3BN,cAAAA,SACJP,OAAOC,eACL;AAAA,UACEhM,UAAUsP;AAAAA,UACVnE,kBAAkB2B;AAAAA,UAClBlD;AAAAA,UACAnK;AAAAA,UACAgK;AAAAA,UACAmB;AAAAA,UACAxL,OAAOwO;AAAAA,WAET,QACA;AAAA,UACE3B,YAAY;AAAA,UACZ5I,MAAM;AACI6I,mBAAAA,QAAAA,KACN,0DACF,GACOtB;AAAAA,UAAAA;AAAAA,QACT,CAEJ;AACF0E,2BAAmB1C,gBACjBN,MACF;AAAA,MAAA;AAAA,IACF,CACD,GAEG1M,SAASsL,YAAY/K,SAAS,KAChC+K,YAAYwE,QAASC,CAAe,eAAA;AAC5B/E,YAAAA,eAAazB,YAAY+B,YAAYrL,KACxC+P,OAAMA,EAAE1F,SAASyF,WAAWnO,KAC/B;AACIoJ,UAAAA;AACF,YAAIiC,kBAAkB;AACdP,gBAAAA,WACJP,OAAOC,eACL;AAAA,YACEpM;AAAAA,YACAI,UAAUsP;AAAAA,YACVnE,kBAAkB2B;AAAAA,YAClBlD;AAAAA,YACAnK;AAAAA,YACAgK;AAAAA,YACAmB,YAAAA;AAAAA,YACAxL,OAAOuQ;AAAAA,aAET,QACA;AAAA,YACE1D,YAAY;AAAA,YACZ5I,MAAM;AACI6I,qBAAAA,QAAAA,KACN,0DACF,GACOtB;AAAAA,YAAAA;AAAAA,UACT,CAEJ;AAEF0E,iDACG,QAAK,EAAA,KAAKxC,SACRD,UAAAA,iBAAiBP,QAAoC,GACxD;AAAA,QAEJ;AACEgD,6BAAoB,oBAAA,QAAA,EAAK,KAAKxC,SAAUwC,UAAiB,kBAAA;AAAA,IAAA,CAG9D,GAEC1P,SAASyJ,cAAa;AAClBjJ,YAAAA,QAAQR,MAAMI,SAASH,KAAMgQ,YAAWA,OAAOnQ,SAASiN,KAAKjN,IAAI;AACvE,UAAIU,OAAO;AAEHkM,cAAAA,WACJP,OAAOC,eACL;AAAA,UACEd;AAAAA,UACAlL,0CALqBsP,UAAiB,iBAAA,CAAA;AAAA,UAMtCnE,kBAAkB2B;AAAAA,UAClBlD;AAAAA,UACAnK;AAAAA,UACAmL,YAAYzB,YAAYsG;AAAAA,UACxBhG;AAAAA,UACArK,OAAOgB;AAAAA,WAET,QACA;AAAA,UACE6L,YAAY;AAAA,UACZ5I,MAAM;AACI6I,mBAAAA,QAAAA,KACN,0DACF,GACO/C,YAAYsG;AAAAA,UAAAA;AAAAA,QACrB,CAEJ;AACFH,2BAAmBjG,YAAYiD,QAA+B;AAAA,MAAA;AAAA,IAChE;AAGGgD,WAAAA;AAAAA,EAAAA,GACN,CACDpE,aACAtL,OACAI,UACA4J,SACA+C,MACAc,OACAhO,MACAoN,kBACAxD,aACAuD,iBACAzD,YAAY+B,aACZ/B,YAAYmE,YACZnE,YAAYsG,MACZhG,QAAQ,CACT;AACD,SAAOO,QACL,MACE,oBAAC,aAAyBd,YAAY,KAAK4D,SACxCuC,UADQ1C,QAAAA,GAAAA,KAAKjN,IAEhB,GAEF,CAACiN,MAAMzD,YAAYmG,OAAO,CAC5B;AACF;AAEA5C,KAAKF,cAAc;AC/TnB,MAAMvK,UAAQC,cAAc,oBAAoB;AAMhC6N,SAAAA,kBACdpD,aACAK,oBACAgD,oBACwD;AAClDC,QAAAA,kBAAkB,CAAC,SAAS,OAAO,SAAS,UAAU,KAAK,GAC3DC,gBAAgBF,sBAAsB,CAAC;AAC7C,SAAO,SAAqB5N,QAA+C;AACzEA,WAAAA,OAAO+N,iBAAkBhN,CAA+C,UAAA;AAEtE6I,aAAOoE,KAAKF,aAAa,EAAEP,QAASU,CAAQ,QAAA;AAC1C,YAAIA,QAAQ;AACCC,qBAAAA,UAAUJ,cAAcG,GAAG,GAAG;AACnCJ,gBAAAA,gBAAgBnC,SAASwC,MAAM;AACjC,oBAAM,IAAI9F,MAAM,cAAc8F,MAAM,eAAe;AAErD,gBAAIC,SAASD,QAAQnN,MAAMqN,WAAW,GAAG;AACvCrN,oBAAMK,eAAe;AACfiN,oBAAAA,eAAeP,cAAcG,GAAG;AACtC,kBAAII,cAAc;AACV5C,sBAAAA,OAAO4C,aAAaH,MAAM;AAChCrO,wBAAM,UAAUqO,MAAM,cAAczC,IAAI,EAAE,GAC1ClB,YAAY+D,KAAK;AAAA,kBACfrF,MAAM;AAAA,kBACNsF,eAAe;AAAA,oBACbtF,MAAM;AAAA,oBACNuF,WAAW/C;AAAAA,kBACb;AAAA,kBACAzL;AAAAA,gBAAAA,CACD;AAAA,cAAA;AAAA,YACH;AAAA,UACF;AAGJ,YAAIiO,QAAQ;AACCC,qBAAAA,UAAUJ,cAAcG,GAAG,GAAG;AACnCJ,gBAAAA,gBAAgBnC,SAASwC,MAAM;AACjC,oBAAM,IAAI9F,MAAM,cAAc8F,MAAM,eAAe;AAErD,gBAAIC,SAASD,QAAQnN,MAAMqN,WAAW,GAAG;AACjCK,oBAAAA,kBAAkBX,cAAcG,GAAG;AACzC,kBAAIQ,iBAAiB;AACbC,sBAAAA,UAAUD,gBAAgBP,MAAM;AACtCQ,wBAAQ3N,OAAO6J,kBAAkB;AAAA,cAAA;AAAA,YACnC;AAAA,UACF;AAAA,MACF,CAEH;AAAA,IAAA,GAEI5K;AAAAA,EACT;AACF;AC7DO,SAAS2O,yBAAyB;AAAA,EACvCpE;AAAAA,EACAqE;AAAAA,EACAC;AAKF,GAAG;AACD,QAAMC,gBAAgBF,YAAYG;AAElCH,SAAAA,YAAYG,QAASC,CAAkB,OAAA;AACrCF,kBAAcE,EAAE,GAGd,CAACzE,YAAY0E,YAAAA,EAAcC,QAAQ;AAAA,MAAC,aAAa;AAAA,IAAY,CAAA,KAC7DF,GAAG/F,SAAS,mBAEZ4F,qBAAqBG,EAAE;AAAA,EAAA,GAIpB,MAAM;AACXJ,gBAAYG,QAAQD;AAAAA,EACtB;AACF;AC0CA,MAAMjP,QAAQC,cAAc,oBAAoB,GAE1CqP,oBAAmC;AAAA,EACvC3P,UAAU;AAAA,EACVL,YAAY;AAAA,EACZiQ,eAAe;AAAA,EACfrL,MAAM;AAAA,EACNsL,OAAO;AACT,GAmDaC,uBAAuBC,WAGlC,SAA8B1Q,OAAO2Q,cAAc;AAC7C,QAAA;AAAA,IACJC;AAAAA,IACA5C;AAAAA,IACAE;AAAAA,IACA2C;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACApF;AAAAA,IACAzD;AAAAA,IACAC;AAAAA,IACAuD;AAAAA,IACAtD;AAAAA,IACA4I;AAAAA,IACA3I;AAAAA,IACA/I,WAAW2R;AAAAA,IACXC;AAAAA,IACA5I;AAAAA,IACA,GAAG6I;AAAAA,EACDrR,IAAAA,OAEE+L,qBAAqBC,sBAAAA,GACrBsF,MAAMhQ,OAA8B,IAAI,GACxC,CAACiQ,iBAAiBC,kBAAkB,IAAI9P,SAC5C,IACF,GACM,CAAC+P,iBAAiBC,kBAAkB,IAAIhQ,SAAS,EAAK,GACtD,CAACiQ,sBAAsBC,wBAAwB,IAAIlQ,SAEvD,CAAA,CAAE;AAIFiP,sBAAAA,cACA,MAAMW,IAAIzP,OACZ;AAEA,QAAMgQ,sBAAsBvQ,OAAO2P,gBAAgB,GAE7CvF,cAAcoG,WAAWC,kBAAkB,GAC3CjM,WAAWkM,YAAYtG,aAAcuG,CAAAA,MACzCA,EAAE5B,QAAQ;AAAA,IAAC,aAAa;AAAA,EAAA,CAAY,CACtC,GACMlI,cAAc6J,YAAYtG,aAAcuG,CAAMA,QAAAA,IAAEC,QAAQC,MAAM,GAC9DpC,cAAcqC,SAAAA,GAEdC,gBAAgBlK,YAAYvJ,MAAMsK;AAKxCF,UAAQ,MAAM;AAERlD,QAAAA;AACF9E,aAAAA,MAAM,+BAA+B,GAC9B+O;AAET,UAAMuC,cAAcxD,kBAClBpD,aACAK,oBACA6E,OACF;AAEM,WAAA,MAAA,0BAA0B,GACzB0B,YAAYvC,WAAW;AAAA,EAAA,GAC7B,CAACrE,aAAakF,SAAS7E,oBAAoBjG,UAAUiK,WAAW,CAAC;AAE9DwC,QAAAA,gBAAgB9E,YACnB+E,CAAAA,WACE,oBAAA,SAAA,EACKA,GAAAA,QACJ,UACA,aACA,aACA,gBACA,aACA,aACA,WAEH,CAAA,GACD,CACErK,aACAK,YACA1C,UACAsC,aACAC,aACAC,gBACAC,WAAW,CAEf,GAEMkK,aAAahF,YAEfiF,CAGG,WAAA;AACCA,QAAAA,OAAO/G,KAAKnL,UAAU,QAAQ;AAC5BmS,UAAAA,WACD,oBAAA,MAAA,EACKD,GAAAA,QACJ,aACA,aACA,kBACA,aACA,iBACA,SAEH,CAAA;AACD,UACExB,qBACAwB,OAAO/G,KAAKiH,eACZF,OAAOpT,KAAKA,SAAS;AAErB,eAEI,qBAAA,UAAA,EAAA,UAAA;AAAA,UAAA,oBAAC,UAAK,OAAOgR,mBAAmB,iBAAiB,IAC9CY,+BACH;AAAA,UACCyB;AAAAA,QAAAA,GACH;AAGEE,YAAAA,aAAaH,OAAO/G,KAAKmH;AAC3BD,aAAAA,eACFF,WAAWE,WAAWE,UAAU;AAAA,QAAC/T,UAAU2T;AAAAA,MAAS,CAAA,IAE/CA;AAAAA,IAAAA;AAET,WAAOD,OAAO1T;AAAAA,EAEhB,GAAA,CACE0M,aACA5F,UACA+F,kBACAxD,aACAuD,iBACAsF,mBACA/I,WAAW,CAEf,GAEM6K,4BAA4BvF,YAAY,MAAM;AAClD,QAAI0D,gBAAgB;AAClBnQ,YAAM,wBAAwBqC,KAAKC,UAAU6N,cAAc,CAAC,EAAE;AAC9D,YAAM8B,sBAAsB1T,mBAC1B4R,gBACAlI,eAAe8G,YAAY/Q,UAAUqT,aAAa,CACpD;AACA,UAAIY,wBAAwB,MAAM;AAChCjS,cACE,mCAAmCqC,KAAKC,UAAU2P,mBAAmB,CAAC,EACxE;AACMC,cAAAA,aAAaC,aAAaF,qBAAqBlD,WAAW;AAC5DmD,uBACFzP,WAAW2P,OAAOrD,aAAamD,UAAU,GAGpCnD,YAAYsD,WAAWC,KAAMC,OAAMA,EAAEnJ,SAAS,eAAe,KAChEsB,YAAY+D,KAAK;AAAA,UACfrF,MAAM;AAAA,UACN5K,WAAWyT;AAAAA,QAAAA,CACZ,GAEHlD,YAAYlM;MAAS;AAAA,IAEzB;AAAA,EACF,GACC,CAACwO,eAAe3G,aAAayF,gBAAgBpB,WAAW,CAAC,GAEtDC,uBAAuBvC,YAC1B+F,CAA0B,cAAA;AACrBvC,QAAAA,oBAAoBA,iBAAiB9R,SAAS,GAAG;AACnD,YAAMsU,iBAA4C,CAAE;AACpDxC,UAAAA,iBAAiBvC,QAASgF,CAAwB,wBAAA;AAChD,cAAMR,eAAaC,aACjBO,oBAAoBlU,WACpBuQ,WACF;AACA,YAAI,CAAC4D,MAAWC,QAAQV,YAAU,GAAG;AAC/BQ,8BAAoBG,WACtBH,oBAAoBG,QAAQ;AAAA,YAC1BC,cAAc;AAAA,YACdhB,iBAAiBY;AAAAA,YACjBK,QAAQ;AAAA,UAAA,CACT;AAEH;AAAA,QAAA;AAEEC,YAAAA;AACAR,YAAAA,cACFQ,WAAWC,qBAAqBf,cAAYM,SAAS,GAElDQ,YAAYA,aAAad,gBACzBc,aAAa,QAAQd,eACtB;AACM9U,gBAAAA,QAAQgP,mBAAmB8G,SAASnI,kBAAkB,GACtDoI,oBAAoBC,oBACxBhW,OACA4V,UACA7L,WACF;AACIuL,8BAAoBG,WACtBH,oBAAoBG,QAAQ;AAAA,YAC1BC,cAAcK;AAAAA,YACdrB,iBAAiBY;AAAAA,YACjBK,QAAQ;AAAA,UAAA,CACT;AAAA,QAAA;AAMHC,qBAAa,QACfP,eAAe1U,KAAK;AAAA,UAClB,GAAIiV,YAAYd;AAAAA,UAChBJ,iBAAiBY;AAAAA,QAAAA,CAClB;AAAA,MAAA,CAEJ,GACGD,eAAetU,SAAS,GAAG;AAC7ByS,iCAAyB6B,cAAc;AACvC;AAAA,MAAA;AAAA,IACF;AAEF7B,6BAA0BD,4BAEpBA,uBAAqBxS,SAAS,IACzB,KAGFwS,sBACR;AAAA,KAEH,CAAC5F,oBAAoBkF,kBAAkB9I,aAAa4H,WAAW,CACjE;AAGA/N,YAAU,MAAM;AACd,UAAMqS,UAAU3I,YAAYuC,GAAG,SAAS,MAAM;AAC5C+B,2BAAAA,GACAgD,0BAA0B;AAAA,IAC3B,CAAA,GACKsB,iBAAiB5I,YAAYuC,GAAG,iBAAiB,MAAM;AAC3DyD,yBAAmB,EAAI;AAAA,IACxB,CAAA,GACK6C,iBAAiB7I,YAAYuC,GAAG,iBAAiB,MAAM;AAC3DyD,yBAAmB,EAAK;AAAA,IAAA,CACzB;AAED,WAAO,MAAM;AACX2C,cAAQjG,eACRkG,eAAelG,YAAY,GAC3BmG,eAAenG,YAAY;AAAA,IAC7B;AAAA,EAAA,GACC,CAAC1C,aAAasH,2BAA2BhD,oBAAoB,CAAC,GAGjEhO,UAAU,MAAM;AACVmP,sBAAkB,CAACM,mBACrBuB,0BAA0B;AAAA,EAE3B,GAAA,CAACvB,iBAAiBN,gBAAgB6B,yBAAyB,CAAC;AAE/D,QAAM,CAACwB,wBAAwBC,yBAAyB,IAAI/S,SAAS,EAAK;AAC1EM,YAAU,MAAM;AACTwS,+BAEHC,0BAA0B,EAAI,GAC9BzE,qBAAqB;AAAA,KAEtB,CAACA,sBAAsBwE,sBAAsB,CAAC,GAEjDxS,UAAU,MAAM;AACTnC,YAAQoR,kBAAkBY,oBAAoBhQ,OAAO,KACxDmO,wBAEF6B,oBAAoBhQ,UAAUoP;AAAAA,KAC7B,CAACA,kBAAkBjB,oBAAoB,CAAC,GAG3ChO,UAAU,MAAM;AACd,UAAM0S,WAAW5E,yBAAyB;AAAA,MACxCpE;AAAAA,MACAqE;AAAAA,MACAC;AAAAA,IAAAA,CACD;AACD,WAAO,MAAM0E,SAAS;AAAA,EACrB,GAAA,CAAChJ,aAAaqE,aAAaC,oBAAoB,CAAC;AAG7C2E,QAAAA,aAAalH,YAChBvL,CAA8D,UAAA;AACzD6O,aACaA,OAAO7O,KAAK,MAEZX,UACbW,MAAMK,eAAe,IAEdL,MAAMqN,YAAYqF,iBAC3BlJ,YAAY+D,KAAK;AAAA,MACfrF,MAAM;AAAA,MACNsF,eAAe;AAAA,QACbtF,MAAM;AAAA,QACNyK,MAAM3S,MAAMqN,YAAYqF;AAAAA,MAC1B;AAAA,MACAzT,QAAQ4O;AAAAA,MACRR,aAAarN;AAAAA,IAAAA,CACd;AAAA,EAAA,GAGL,CAAC6O,QAAQrF,aAAaqE,WAAW,CACnC,GAGM+E,cAAcrH,YACjBvL,CAAgE,YAAA;AAC/D,UAAM9D,UAAQgP,mBAAmB8G,SAASnI,kBAAkB,GAMtDtN,OALU2V,oBACdhW,SACA2R,YAAYvQ,WACZ2I,WACF,GACsBvI,MAAMnB,QAAQ,CAAE,GAChCsW,gBAAgBjE,UAAU;AAAA,MAAC5O,OAAAA;AAAAA,MAAO9D,OAAAA;AAAAA,MAAOK;AAAAA,MAAM0J;AAAAA,IAAAA,CAAY;AAE7D4M,qBAAiB,CAAChF,YAAYvQ,aAChC0C,QAAMK,eAAe,GAGrBmJ,YAAY+D,KAAK;AAAA,MAACrF,MAAM;AAAA,IAAA,CAAiB,GAEzC4K,QAAQC,QAAQF,aAAa,EAC1BG,KAAMC,CAAW,aAAA;AACV,YAAA,8CAA8CA,QAAM,GAEtD,CAACA,YAAU,CAACA,SAAOC,UACrBpU,MAAM,uDAAuD,GAE7D+O,YAAYsF,WAAWnT,QAAM0S,aAAa,KACjCO,SAAOC,SAChBrF,YAAYuF,eACVC,aAAaJ,SAAOC,QAA+B;AAAA,QACjDjN;AAAAA,MACD,CAAA,CACH,IAEAqN,QAAQtK,KACN,wDACAiK,QACF;AAAA,IAEH,CAAA,EACAM,MAAOC,CACNF,WAAAA,QAAQE,MAAMA,KAAK,GAEZA,MACR,EACAC,QAAQ,MAAM;AACbjK,kBAAY+D,KAAK;AAAA,QAACrF,MAAM;AAAA,MAAA,CAAsB;AAAA,IAC/C,CAAA,KACMlI,QAAMqN,YAAYqF,iBAC3BlJ,YAAY+D,KAAK;AAAA,MACfrF,MAAM;AAAA,MACNsF,eAAe;AAAA,QACbtF,MAAM;AAAA,QACNyK,MAAM3S,QAAMqN,YAAYqF;AAAAA,MAC1B;AAAA,MACAzT,QAAQ4O;AAAAA,MACRR,aAAarN;AAAAA,IAAAA,CACd,GAGHlB,MAAM,uDAAuD;AAAA,EAC/D,GACA,CAAC0K,aAAaoF,SAAS/E,oBAAoB5D,aAAa4H,WAAW,CACrE,GAEM6F,gBAAmDnI,YACtDvL,CAAU,YAAA;AAIT,QAHIgM,WACFA,QAAQhM,OAAK,GAEX,CAACA,QAAM2T,sBAAsB;AACzBrW,YAAAA,YAAY4N,mBAAmBC,aAAatB,kBAAkB;AAEhEvM,oBAAc,SAChBiE,WAAW2P,OAAOrD,aAAatG,OAAOqM,MAAM/F,aAAa,CAAE,CAAA,CAAC,GAC5DA,YAAYlM,SAAS,IAEvB6H,YAAY+D,KAAK;AAAA,QAACrF,MAAM;AAAA,QAAkBlI,OAAAA;AAAAA,MAAAA,CAAM;AAC1C4R,YAAAA,eAAe1G,mBAAmBC,aAAatB,kBAAkB;AAEnEvM,oBAAcsU,gBAChBpI,YAAY+D,KAAK;AAAA,QACfrF,MAAM;AAAA,QACN5K;AAAAA,MAAAA,CACD;AAAA,IAAA;AAAA,EAEL,GAEF,CAACkM,aAAawC,SAASnC,oBAAoBgE,WAAW,CACxD,GAEMgG,cAActI,YACjBvL,CAAwD,YAAA;AACnD8O,eACFA,QAAQ9O,OAAK;AAGT8T,UAAAA,iBAAiBjG,YAAYvQ,YAC/BuQ,YAAYvQ,UAAUI,MAAMnB,KAAKwX,MAAM,GAAG,CAAC,IAC3C1U,QACE2U,aAAaF,iBACdG,KAAKC,WAAWrG,aAAaiG,cAAc,IAG5CzU,QACE,CAAC8U,GAAGC,YAAY,IAAIH,KAAKI,KAAKxG,aAAa,CAAA,CAAE,GAC7CyG,gBAAgBF,aAAaL,MAAM,GAAG,CAAC,GACvCQ,kBAAkBT,iBACpB7S,KAAKK,OAAOgT,eAAeR,cAAc,IACzC,IACEU,kBAAkBR,aACpB,CAACnG,YAAY4G,YAAYT,UAAU,IACnC;AAEFnG,gBAAYvQ,aAAamU,MAAW7K,YAAYiH,YAAYvQ,SAAS,KAE7CiX,mBAAmBC,oBAC3CjT,WAAWmT,YACT7G,aACAA,YAAY8G,mBAAmB;AAAA,MAACvK,YAAY,CAAA;AAAA,IAAA,CAAG,CACjD,GACAyD,YAAYlM;EAAS,GAGzB,CAACmN,SAASjB,WAAW,CACvB,GAEM+G,eAAkDrJ,YACrDvL,CAAU,YAAA;AACL8L,cACFA,OAAO9L,OAAK,GAETA,QAAM6U,qBAAqB,KAC9BrL,YAAY+D,KAAK;AAAA,MAACrF,MAAM;AAAA,MAAkBlI,OAAAA;AAAAA,IAAAA,CAAM;AAAA,EAAA,GAGpD,CAACwJ,aAAasC,MAAM,CACtB,GAEMgJ,sBAAsBvJ,YACzBvL,CAAsB,YAAA;AACjB2O,qBACFA,cAAc3O,OAAK;AAAA,KAGvB,CAAC2O,aAAa,CAChB,GAkBMoG,oBAAoBxJ,YAAY,MAAM;AAC1C,QAAI,CAACsC,YAAYvQ;AACf;AAEF,UAAM0X,OAAOpV,YAAYqV,yBAAyBpH,WAAW,GACvD;AAAA,MAACqH;AAAAA,IAAAA,IAAiBF;AAExB,QAAI5F,IAAIzP,YAAYuV;AAClB;AAGF,UAAMC,eADSvV,YAAYwV,UAAUvH,WAAW,EACpB1C,aAAa;AACrC,QAAA,CAACgK,gBAAgBA,aAAazJ,eAAe;AAC/C;AAEI2J,UAAAA,mBAAmBF,aAAavJ,WAAW,CAAC;AAC9C,QAAA;AACF,YAAM0J,cAAc1V,YAAY2V,WAC9B1H,aACAA,YAAYvQ,SACd;AACA,OACEgY,YAAYE,gBAAgBH,iBAAiBG,eAC7CF,YAAYG,cAAcJ,iBAAiBI,eAE3C3W,MAAM,6CAA6C,GAEnDqW,cAAcO,gBAEdP,GAAAA,aAAaQ,SAASL,WAAW;AAAA,IAAA,QAE7B;AACNxW,YAAM,qDAAqD,GAE3DyC,WAAWqU,SAAS/H,WAAW,GAE3BA,YAAY/Q,SAASG,SAAS,KAChCsE,WAAW2P,OAAOrD,aAAa,CAAC,GAAG,CAAC,CAAC,GAEvCA,YAAYlM,SAAS;AAAA,IAAA;AAAA,EACvB,GACC,CAACyN,KAAKvB,WAAW,CAAC;AAIrB/N,YAAU,MAAM;AACd,QAAIuP,iBAAiB;AACbwG,YAAAA,mBAAmB,IAAIC,iBAAiBf,iBAAiB;AAC/Dc,aAAAA,iBAAiBE,QAAQ1G,iBAAiB;AAAA,QACxC2G,mBAAmB;AAAA,QACnBhQ,YAAY;AAAA,QACZiQ,eAAe;AAAA,QACfC,WAAW;AAAA,QACXC,SAAS;AAAA,MACV,CAAA,GACM,MAAM;AACXN,yBAAiBO,WAAW;AAAA,MAC9B;AAAA,IAAA;AAAA,EACF,GAEC,CAACrB,mBAAmB1F,eAAe,CAAC;AAEjCgH,QAAAA,gBAAgB9K,YACnBvL,CAAyC,YAAA;AACpClC,UAAMwY,aACRxY,MAAMwY,UAAUtW,OAAK,GAElBA,QAAM2T,mBAAAA,KACT9F,YAAYb,eAAehN,OAAK,GAE7BA,QAAM2T,mBAAmB,KAC5BnK,YAAY+D,KAAK;AAAA,MACfrF,MAAM;AAAA,MACNsF,eAAe;AAAA,QACbtF,MAAM;AAAA,QACNqO,eAAe;AAAA,UACbC,KAAKxW,QAAMwW;AAAAA,UACXC,MAAMzW,QAAMyW;AAAAA,UACZC,QAAQ1W,QAAM0W;AAAAA,UACdC,SAAS3W,QAAM2W;AAAAA,UACfC,SAAS5W,QAAM4W;AAAAA,UACfC,UAAU7W,QAAM6W;AAAAA,QAAAA;AAAAA,MAEpB;AAAA,MACA5X,QAAQ4O;AAAAA,MACRR,aAAarN;AAAAA,IAAAA,CACd;AAAA,EAAA,GAGL,CAAClC,OAAO0L,aAAaqE,WAAW,CAClC,GAEMiJ,cAAcvL,YACjBvL,CAAyC,YAAA;AACpClC,UAAMiZ,WACRjZ,MAAMiZ,QAAQ/W,OAAK,GAEhBA,QAAM2T,mBAAAA,KACTnK,YAAY+D,KAAK;AAAA,MACfrF,MAAM;AAAA,MACNsF,eAAe;AAAA,QACbtF,MAAM;AAAA,QACNqO,eAAe;AAAA,UACbC,KAAKxW,QAAMwW;AAAAA,UACXC,MAAMzW,QAAMyW;AAAAA,UACZC,QAAQ1W,QAAM0W;AAAAA,UACdC,SAAS3W,QAAM2W;AAAAA,UACfC,SAAS5W,QAAM4W;AAAAA,UACfC,UAAU7W,QAAM6W;AAAAA,QAAAA;AAAAA,MAEpB;AAAA,MACA5X,QAAQ4O;AAAAA,MACRR,aAAarN;AAAAA,IAAAA,CACd;AAAA,EAAA,GAGL,CAAClC,OAAO0L,aAAaqE,WAAW,CAClC,GAEMmJ,iCAAiClQ,QAAQ,MAAM;AAEnD,QAAIoI,4BAA4B7P;AAIhC,aAAI6P,4BAA4B,OACvB+H,OAGF,CAACC,SAAsBC,aAAoB;AAChDjI,gCAAwBrF,oBAAoBsN,QAAQ;AAAA,MACtD;AAAA,EAAA,GACC,CAACtN,oBAAoBqF,uBAAuB,CAAC,GAE1CkI,WAA8C7L,YAClD,CAAC,CAAGhP,EAAAA,MAAI,MAAM;AACR8a,QAAAA,qBAAqBxJ,YAAY/Q,UAAUmJ,WAAW;AACxD,aAAO,CACL;AAAA,QACExI,QAAQ;AAAA,UACNlB,MAAM,CAAC,GAAG,CAAC;AAAA,UACXF,QAAQ;AAAA,QACV;AAAA,QACAqB,OAAO;AAAA,UACLnB,MAAM,CAAC,GAAG,CAAC;AAAA,UACXF,QAAQ;AAAA,QACV;AAAA,QACAqU,aAAa;AAAA,MAAA,CACd;AAIL,QAAInU,OAAKU,WAAW;AAClB,aAAO,CAAE;AAEX,UAAMgW,WAASxD,qBAAqBhF,OAAQnC,CAAAA,SAEtCmJ,MAAW7K,YAAY0B,IAAI,IAEzB/L,OAAKU,WAAW,IACX,KAGPgE,KAAKK,OAAOgH,KAAK5K,MAAMnB,MAAMA,MAAI,KACjC0E,KAAKK,OAAOgH,KAAK7K,OAAOlB,MAAMA,MAAI,IAKpCkV,MAAW6F,aAAahP,MAAM;AAAA,MAC5B7K,QAAQ;AAAA,QAAClB,MAAAA;AAAAA,QAAMF,QAAQ;AAAA,MAAC;AAAA,MACxBqB,OAAO;AAAA,QAACnB,MAAAA;AAAAA,QAAMF,QAAQ;AAAA,MAAA;AAAA,IACvB,CAAA,KAAKoV,MAAW9G,SAASrC,MAAM/L,MAAI,CAEvC;AACD,WAAI0W,SAAOhW,SAAS,IACXgW,WAEF,CAAE;AAAA,EAEX,GAAA,CAACpF,aAAa5H,aAAawJ,oBAAoB,CACjD;AAgCA,SA3BA3P,UAAU,MAAM;AACVH,QAAAA,UAAUC,YAAYC,UACxBgO,aACAA,WACF,GACAyB,mBAAmBF,IAAIzP,OAAO;AAAA,KAC7B,CAACkO,aAAauB,GAAG,CAAC,GAErBtP,UAAU,MAAM;AACd,UAAM2L,WAAS7L,YAAYwV,UAAUvH,WAAW,GAE1C3J,YAAYA,MAAM;AACtBsF,kBAAY+D,KAAK;AAAA,QAACrF,MAAM;AAAA,MAAA,CAAU;AAAA,IACpC,GACMxC,SAASA,MAAM;AACnB8D,kBAAY+D,KAAK;AAAA,QAACrF,MAAM;AAAA,MAAA,CAAO;AAAA,IACjC;AAEO1H,WAAAA,SAAAA,SAAS+W,iBAAiB,WAAWrT,SAAS,GACrDuH,SAAOjL,SAAS+W,iBAAiB,QAAQ7R,MAAM,GAExC,MAAM;AACJlF,eAAAA,SAASgX,oBAAoB,WAAWtT,SAAS,GACxDuH,SAAOjL,SAASgX,oBAAoB,QAAQ9R,MAAM;AAAA,IACpD;AAAA,EAAA,GACC,CAACmI,aAAarE,WAAW,CAAC,GAExBK,qBAGE0F,kBAAkB,OACvB;AAAA,IAACkI;AAAAA,IAAA;AAAA,MACC,GAAItI;AAAAA,MACJ,WAAW;AAAA,MACX,WAAWA,UAAUhI,aAAa;AAAA,MAClC;AAAA,MACA,QAAQyN;AAAAA,MACR,QAAQnC;AAAAA,MACR,SAASoB;AAAAA,MACT,kBAAkBiB;AAAAA,MAClB,aAAc9U,CAAU,YAAA;AACtBlC,cAAMkG,cAAchE,OAAK,GAErB,CAACA,QAAM2T,wBAAwB,CAAC3T,QAAM6U,0BACxCrL,YAAY+D,KAAK;AAAA,UAACrF,MAAM;AAAA,QAAA,CAAY;AAAA,MAExC;AAAA,MACA,SAASwL;AAAAA,MACT,WAAW2C;AAAAA,MACX,SAASS;AAAAA,MACT,SAASlE;AAAAA,MACT;AAAA,MAGA,mBAAmBvT;AAAAA,MACnB;AAAA,MACA;AAAA,MACA,yBAAyB2X;AAAAA,IAAAA;AAAAA,EAAAA,IA7BpB;AAgCX,CAAC;AAEDzI,qBAAqBlF,cAAc;ACh1B5B,SAAAqO,oBAAA5Z,OAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA,GAGLiB,SAAe0Y,UACf5L,GAAAA,KAAW6L,eAAe9Z,MAAKiO,EAAG;AAAC9N,MAAAA;AAAAF,IAAAkB,CAAAA,MAAAA,UAAAlB,SAAAgO,MAEzB9N,KAAAA,MAAA;AACR,UAAA4Z,eAAqB5Y,OAAM8M,GAAI,KAAKA,EAAE;AAAC,WAAA,MAAA;AAGrC8L,mBAAY3L,YAAa;AAAA,IAAC;AAAA,EAE7BnO,GAAAA,OAAAkB,QAAAlB,OAAAgO,IAAAhO,OAAAE,MAAAA,KAAAF,EAAA,CAAA;AAAAM,MAAAA;AAAAN,SAAAA,SAAAkB,UAAEZ,MAACY,MAAM,GAAClB,OAAAkB,QAAAlB,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GANX+B,UAAU7B,IAMPI,EAAQ,GAAC;AAAA;"}