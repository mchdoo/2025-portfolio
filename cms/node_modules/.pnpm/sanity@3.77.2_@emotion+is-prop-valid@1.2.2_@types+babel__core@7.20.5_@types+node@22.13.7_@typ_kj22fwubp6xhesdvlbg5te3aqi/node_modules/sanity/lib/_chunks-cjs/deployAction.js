"use strict";
var path = require("node:path"), zlib = require("node:zlib"), tar = require("tar-fs"), buildAction = require("./buildAction.js"), extractManifestAction = require("./extractManifestAction.js"), helpers = require("./helpers.js");
function _interopDefaultCompat(e) {
  return e && typeof e == "object" && "default" in e ? e : { default: e };
}
var path__default = /* @__PURE__ */ _interopDefaultCompat(path), zlib__default = /* @__PURE__ */ _interopDefaultCompat(zlib), tar__default = /* @__PURE__ */ _interopDefaultCompat(tar);
async function deployStudioAction(args, context) {
  const {
    apiClient,
    workDir,
    chalk,
    output,
    prompt,
    cliConfig
  } = context, flags = {
    build: !0,
    ...args.extOptions
  }, customSourceDir = args.argsWithoutOptions[0], sourceDir = path__default.default.resolve(process.cwd(), customSourceDir || path__default.default.join(workDir, "dist")), isAutoUpdating = buildAction.shouldAutoUpdate({
    flags,
    cliConfig
  }), isCoreApp = cliConfig && "__experimental_coreAppConfiguration" in cliConfig, installedSanityVersion = await helpers.getInstalledSanityVersion(), configStudioHost = cliConfig && "studioHost" in cliConfig && cliConfig.studioHost, appId = cliConfig && "__experimental_coreAppConfiguration" in cliConfig && cliConfig.__experimental_coreAppConfiguration?.appId, client = apiClient({
    requireUser: !0,
    requireProject: !isCoreApp
    // core apps are not project-specific
  }).withConfig({
    apiVersion: "v2024-08-01"
  });
  if (customSourceDir === "graphql")
    throw new Error("Did you mean `sanity graphql deploy`?");
  if (customSourceDir) {
    let relativeOutput = path__default.default.relative(process.cwd(), sourceDir);
    if (relativeOutput[0] !== "." && (relativeOutput = `./${relativeOutput}`), !(await helpers.dirIsEmptyOrNonExistent(sourceDir) || await prompt.single({
      type: "confirm",
      message: `"${relativeOutput}" is not empty, do you want to proceed?`,
      default: !1
    }))) {
      output.print("Cancelled.");
      return;
    }
    output.print(`Building to ${relativeOutput}
`);
  }
  let spinner = output.spinner("Checking project info").start(), userApplication;
  try {
    const configParams = {
      client,
      context,
      spinner
    };
    isCoreApp && appId ? configParams.appId = appId : configStudioHost && (configParams.appHost = configStudioHost), configStudioHost || appId ? userApplication = await helpers.getOrCreateUserApplicationFromConfig(configParams) : userApplication = isCoreApp ? await helpers.getOrCreateCoreApplication({
      client,
      context,
      spinner
    }) : await helpers.getOrCreateStudio({
      client,
      context,
      spinner
    });
  } catch (err) {
    if (err.message) {
      output.error(chalk.red(err.message));
      return;
    }
    throw helpers.debug("Error creating user application", err), err;
  }
  if (flags.build) {
    const buildArgs = {
      ...args,
      extOptions: flags,
      argsWithoutOptions: [customSourceDir].filter(Boolean)
    }, {
      didCompile
    } = await buildAction.buildSanityStudio(buildArgs, context, {
      basePath: "/"
    });
    if (!didCompile)
      return;
    isCoreApp || await extractManifestAction.extractManifestSafe({
      ...buildArgs,
      extOptions: {},
      extraArguments: []
    }, context);
  }
  spinner = output.spinner("Verifying local content").start();
  try {
    await helpers.checkDir(sourceDir), spinner.succeed();
  } catch (err) {
    throw spinner.fail(), helpers.debug("Error checking directory", err), err;
  }
  const parentDir = path__default.default.dirname(sourceDir), base = path__default.default.basename(sourceDir), tarball = tar__default.default.pack(parentDir, {
    entries: [base]
  }).pipe(zlib__default.default.createGzip());
  spinner = output.spinner(`Deploying to ${isCoreApp ? "CORE" : "Sanity.Studio"}`).start();
  try {
    const {
      location
    } = await helpers.createDeployment({
      client,
      applicationId: userApplication.id,
      version: installedSanityVersion,
      isAutoUpdating,
      tarball,
      isCoreApp
    });
    spinner.succeed(), output.print(`
Success! ${isCoreApp ? "Application deployed" : `Studio deployed to ${chalk.cyan(location)}`}`), (isCoreApp && !appId || !isCoreApp && !configStudioHost) && (output.print(`
Add ${chalk.cyan(isCoreApp ? `appId: '${userApplication.id}'` : `studioHost: '${userApplication.appHost}'`)}`), output.print(`to ${isCoreApp ? "__experimental_coreAppConfiguration" : "defineCliConfig root properties"} in sanity.cli.js or sanity.cli.ts`), output.print(`to avoid prompting ${isCoreApp ? "" : "for hostname"} on next deploy.`));
  } catch (err) {
    throw spinner.fail(), helpers.debug("Error deploying studio", err), err;
  }
}
exports.default = deployStudioAction;
//# sourceMappingURL=deployAction.js.map
